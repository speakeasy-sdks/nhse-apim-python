"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from pds_fhir import utils
from typing import Any, Optional

class SearchPatientGender(str, Enum):
    r"""Gender with which the patient most strongly identifies."""
    MALE = 'male'
    FEMALE = 'female'
    OTHER = 'other'
    UNKNOWN = 'unknown'


@dataclasses.dataclass
class SearchPatientRequest:
    
    exact_match: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_exact-match', 'style': 'form', 'explode': True }})
    r"""The search only returns results where the `score` field is 1.0. Use this with care - it is unlikely to work with fuzzy search or wildcards."""
    fuzzy_match: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_fuzzy-match', 'style': 'form', 'explode': True }})
    r"""A fuzzy search is performed, including checks for homophones, transposed names and historic information.
    
    You cannot use wildcards with a fuzzy search.
    """
    history: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_history', 'style': 'form', 'explode': True }})
    r"""The search looks for matches in historic information such as previous names and addresses.
    
    This parameter has no effect for a fuzzy search, which always includes historic information.
    """
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '_max-results', 'style': 'form', 'explode': True }})
    r"""The maximum number of matching patients to return. For healthcare worker access, this must be between 1 and 50, and the default is 50.
    For application-restricted access, this must be 1, and the default is 1.
    If too many patients match the search criteria, we return a `TOO_MANY_MATCHES` error.
    """
    address_postcode: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'address-postcode', 'style': 'form', 'explode': True }})
    r"""The postcode of any of the patientâ€™s known addresses.
    
    Not case sensitive.
    Spaces are ignored, for example `LS16AE` and `LS1 6AE` both match `LS1 6AE`.
    Use `*` as a wildcard but not in the first two characters and not in fuzzy search mode.
    Must be [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding), for example a space must be represented by either `%20` or `+` and a wildcard must be encoded as `%2A`.
    """
    birthdate: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'birthdate', 'style': 'form', 'explode': True }})
    r"""Date of birth in the format `<eq|ge|le>yyyy-mm-dd`. To specify a range, use `birthdate=geyyyy-mm-dd&birthdate=leyyyy-mm-dd`."""
    death_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'death-date', 'style': 'form', 'explode': True }})
    r"""Date of death in the format `<eq|ge|le>yyyy-mm-dd`. To specify a range, use `death-date=geyyyy-mm-dd&death-date=leyyyy-mm-dd`.
    
    For a fuzzy search, this is ignored for matching but included in the score calculation.
    """
    family: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'family', 'style': 'form', 'explode': True }})
    r"""The patient's family name (surname).
    
    Not case sensitive.
    Use `*` as a wildcard but not in the first two characters and not in fuzzy search mode.
    Must be [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding), for example a space must be represented by either `%20` or `+` and a wildcard must be encoded as `%2A`.
    """
    gender: Optional[SearchPatientGender] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'gender', 'style': 'form', 'explode': True }})
    r"""Gender with which the patient most strongly identifies."""
    general_practitioner: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'general-practitioner', 'style': 'form', 'explode': True }})
    r"""The Organisation Data Service (ODS) code of the patient's registered GP practice.
    
    Not case sensitive.
    For a fuzzy search, this is ignored for matching but included in the score calculation.
    """
    given: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'given', 'style': 'form', 'explode': True }})
    r"""The patient's given names.
    
    Not case sensitive.
    Use `*` as a wildcard but not in the first two characters and not in fuzzy search mode.
    Must be [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding), for example a space must be represented by either `%20` or `+` and a wildcard must be encoded as `%2A`.
    
    A patient may have more than one given name. Subsequent given names are commonly referred to as 'middle names'.
    Specify multiple given names by repeating this parameter.
    To search for  `Jane Anne Smith` use `given=Jane&given=Anne&family=Smith`.
    
    The first given name may be a [compound name](https://en.wikipedia.org/wiki/Given_name#Compound), for example `John Paul`.
    To search for `John Paul James Smith` (where `John Paul` is the first given name, `James` is the second given name, and `Smith` the family name) use `given=John%20Paul&given=James&family=Smith`.
    
    Note that it is not necessary to specify subsequent given (middle) names, and that doing so may impact your search results in the case they are not recorded in the demographics system.
    """
    nhsd_end_user_organisation_ods: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'NHSD-End-User-Organisation-ODS', 'style': 'simple', 'explode': False }})
    r"""The ODS code of an End User Organisation (EUO). Currently optional but will be updated to be mandatory for client applications which service multiple End User organisations, in order to correctly attribute calls to each EUO. Date of change to a mandatory field to be defined."""
    nhsd_session_urid: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'NHSD-Session-URID', 'style': 'simple', 'explode': False }})
    r"""The user role ID (URID) for the current session. Also known as a user role profile ID (URPID).
    
    This header is optional.
    
    In Application-restricted access mode this header is ignored.
    
    In Healthcare worker access mode if you send this header it must be valid for the logged-in user. See [determine the user's role](https://digital.nhs.uk/developer/guides-and-documentation/security-and-authorisation/user-restricted-restful-apis-nhs-cis2-separate-authentication-and-authorisation#step-9-determine-the-user-s-role) for guidance.
    """
    x_correlation_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Correlation-ID', 'style': 'simple', 'explode': False }})
    r"""An optional ID which you can use to track transactions across multiple systems. It can take any value, but we recommend avoiding `.` characters.
    
    Mirrored back in a response header.
    """
    x_request_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Request-ID', 'style': 'simple', 'explode': False }})
    r"""A globally unique identifier (GUID) for the request, which we use to de-duplicate repeated requests and to trace the request if you contact our helpdesk.
    
    Must be a universally unique identifier (UUID) (ideally version 4).
    
    Mirrored back in a response header.
    
    If you re-send a failed request, use the same value in this header.
    """
    
class SearchPatient4XXApplicationFhirPlusJSONIssueCode(str, Enum):
    r"""FHIR error code."""
    INVALID = 'invalid'
    STRUCTURE = 'structure'
    REQUIRED = 'required'
    VALUE = 'value'
    INVARIANT = 'invariant'
    SECURITY = 'security'
    LOGIN = 'login'
    UNKNOWN = 'unknown'
    EXPIRED = 'expired'
    FORBIDDEN = 'forbidden'
    SUPPRESSED = 'suppressed'
    PROCESSING = 'processing'
    NOT_SUPPORTED = 'not-supported'
    DUPLICATE = 'duplicate'
    MULTIPLE_MATCHES = 'multiple-matches'
    NOT_FOUND = 'not-found'
    DELETED = 'deleted'
    TOO_LONG = 'too-long'
    CODE_INVALID = 'code-invalid'
    EXTENSION = 'extension'
    TOO_COSTLY = 'too-costly'
    BUSINESS_RULE = 'business-rule'
    CONFLICT = 'conflict'
    TRANSIENT = 'transient'
    LOCK_ERROR = 'lock-error'
    NO_STORE = 'no-store'
    EXCEPTION = 'exception'
    TIMEOUT = 'timeout'
    INCOMPLETE = 'incomplete'
    THROTTLED = 'throttled'
    INFORMATIONAL = 'informational'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient4XXApplicationFhirPlusJSONIssueDetailsCoding:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Symbol in syntax defined by the system."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URI of the coding system specification."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the coding system in use."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient4XXApplicationFhirPlusJSONIssueDetails:
    r"""Internal error code."""
    
    coding: Optional[list[SearchPatient4XXApplicationFhirPlusJSONIssueDetailsCoding]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding'), 'exclude': lambda f: f is None }})
    
class SearchPatient4XXApplicationFhirPlusJSONIssueSeverity(str, Enum):
    r"""Severity of the error."""
    FATAL = 'fatal'
    ERROR = 'error'
    WARNING = 'warning'
    INFORMATION = 'information'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient4XXApplicationFhirPlusJSONIssue:
    
    code: SearchPatient4XXApplicationFhirPlusJSONIssueCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""FHIR error code."""
    severity: SearchPatient4XXApplicationFhirPlusJSONIssueSeverity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity') }})
    r"""Severity of the error."""
    details: Optional[SearchPatient4XXApplicationFhirPlusJSONIssueDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Internal error code."""
    diagnostics: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnostics'), 'exclude': lambda f: f is None }})
    r"""Additional diagnostic information about the issue. This information is subject to change."""
    expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expression'), 'exclude': lambda f: f is None }})
    r"""FHIRPath of element(s) related to the error."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient4XXApplicationFhirPlusJSON:
    r"""Outcome of an operation that does not result in a resource or bundle being returned, for example an error or an async/batch submission.
    There are a number of possible error codes that can be returned along with a more detailed description in the `display` field.
    """
    
    issue: Optional[list[SearchPatient4XXApplicationFhirPlusJSONIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue'), 'exclude': lambda f: f is None }})
    r"""List of issues that have occurred."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""FHIR Resource Type."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressExtensionExtension2:
    r"""Value of the address key."""
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Always 'value'."""
    value_string: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueString') }})
    r"""Address key in PAF format. An 8 digit number including leading zeroes, formatted as a string."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressExtensionExtension1ValueCoding:
    r"""URL of specification of address key format."""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Address Key system. Always 'PAF'."""
    system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""URL of Code System that describes available Address Key formats."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressExtensionExtension1:
    r"""Coding system of the address key."""
    
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Always 'type'."""
    value_coding: SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressExtensionExtension1ValueCoding = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCoding') }})
    r"""URL of specification of address key format."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressExtensionURL(str, Enum):
    r"""URL of specification of the AddressKey extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_ADDRESS_KEY = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-AddressKey'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressExtension:
    r"""Unique identifier for an address."""
    
    extension: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Specification of address key system and address key value. Contains exactly two items: one describing the code system the Address Key uses, and the other specifying the value of the Address Key."""
    url: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL of specification of the AddressKey extension."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressText(str, Enum):
    r"""Where a `temp` address is provided a descriptor text must be sent.
    The list of possible values are:
    * `Second Home` - a patient's second home
    * `Student Accommodation` - a patient's place of residence while at university
    * `Respite Care Address` - where the patient resides during respite care
    * `Temporary Residence Address` - where the patient resides for a specific period of time
    * `Convalescence Home` - the address for a patient during a period of recovery
    * `Mobile Home` - the address of a patient's mobile home, parked for a specific period of time, e.g. the address of a caravan park
    * `Holiday Home` - the address for a patient during a holiday
    
    A patient can also register temporarily at a GP practice using a temporary address. Temporary GP registration information does not appear on the PDS, but the address used for it may.
    """
    SECOND_HOME = 'Second Home'
    STUDENT_ACCOMMODATION = 'Student Accommodation'
    RESPITE_CARE_ADDRESS = 'Respite Care Address'
    TEMPORARY_RESIDENCE_ADDRESS = 'Temporary Residence Address'
    CONVALESCENCE_HOME = 'Convalescence Home'
    MOBILE_HOME = 'Mobile Home'
    HOLIDAY_HOME = 'Holiday Home'

class SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressUse(str, Enum):
    r"""Purpose of this address:
      * `home` - the home address is the patient's normal residence. Home address is also known as usual, main, registered, current or permanent address
      * `temp` - a temporary address is an address used for a set period of time, but where the patient's home, permanent address remains unchanged
      * `billing` - an address used for correspondence purposes only
      * `work` - an office address. This can be returned due to legacy data but cannot be added or replaced on update
    
      A patient should have no more than one current `temp` and/or `billing` address.
      However, historically this was constrained only by the integration requirements and was not enforced so theoretically more than one can exist for a patient when retrieving.
      Where multiple instances already exist for the patient it is not expected that local systems should manage those, but should choose the most appropriate one to maintain (e.g. by examining period dates).
    
      A `home` address is the patient's main residential address and should normally be used for all clinical and demographic purposes, including clinical and appointment correspondence.
      However additionally, `temp` and `billing` addresses may be provided by a patient when there is a requirement to record an alternative location for the purposes of unbroken care.
      When sending correspondence to a patient:
      *	a present and valid `billing` address may take precedence over `home` and `temp` addresses. A patient should have only a single current `billing` address. An address is considered 'valid' according to its period start and end dates.
      *	if no current `billing` address is provided, a `temp` address may take precedence over the `home` address, again if it is valid according to its period start and end dates.
      * if there is no valid, current `billing` and/or `temp` address, the `home` address must be used.
    """
    HOME = 'home'
    WORK = 'work'
    TEMP = 'temp'
    BILLING = 'billing'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceAddress:
    r"""An address associated with the patient."""
    
    use: SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressUse = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use') }})
    r"""Purpose of this address:
      * `home` - the home address is the patient's normal residence. Home address is also known as usual, main, registered, current or permanent address
      * `temp` - a temporary address is an address used for a set period of time, but where the patient's home, permanent address remains unchanged
      * `billing` - an address used for correspondence purposes only
      * `work` - an office address. This can be returned due to legacy data but cannot be added or replaced on update
    
      A patient should have no more than one current `temp` and/or `billing` address.
      However, historically this was constrained only by the integration requirements and was not enforced so theoretically more than one can exist for a patient when retrieving.
      Where multiple instances already exist for the patient it is not expected that local systems should manage those, but should choose the most appropriate one to maintain (e.g. by examining period dates).
    
      A `home` address is the patient's main residential address and should normally be used for all clinical and demographic purposes, including clinical and appointment correspondence.
      However additionally, `temp` and `billing` addresses may be provided by a patient when there is a requirement to record an alternative location for the purposes of unbroken care.
      When sending correspondence to a patient:
      *	a present and valid `billing` address may take precedence over `home` and `temp` addresses. A patient should have only a single current `billing` address. An address is considered 'valid' according to its period start and end dates.
      *	if no current `billing` address is provided, a `temp` address may take precedence over the `home` address, again if it is valid according to its period start and end dates.
      * if there is no valid, current `billing` and/or `temp` address, the `home` address must be used.
    """
    extension: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Postal Address File (PAF) key associated with this address formatted as a FHIR extension. Empty if no PAF key for the address is known, or an object specifying the code system of the address key and the value of the address key."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique system identifier for this address."""
    line: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line'), 'exclude': lambda f: f is None }})
    r"""All lines of the address except the postal code.
    
    Systems must apply the following formatting convention when adding or replacing addresses lines:
    *	line 1 - premises ID and/or house name, e.g. `Flat 1` or `The Old Schoolhouse`
    *	line 2 - house number, dependent thoroughfare name and descriptor (if present), thoroughfare name and descriptor, e.g. `23 Mill Lane`
    *	line 3 - dependent locality/village, locality (if present), e.g. `Boxgrove`
    *	line 4 - post town, e.g. `Leeds`
    *	line 5 - county (if present), e.g. `West Yorkshire`
    
    If any of the lines are blank, they are not returned due to FHIR conformance constraints.
    """
    period: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code of the address."""
    text: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceAddressText] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Where a `temp` address is provided a descriptor text must be sent.
    The list of possible values are:
    * `Second Home` - a patient's second home
    * `Student Accommodation` - a patient's place of residence while at university
    * `Respite Care Address` - where the patient resides during respite care
    * `Temporary Residence Address` - where the patient resides for a specific period of time
    * `Convalescence Home` - the address for a patient during a period of recovery
    * `Mobile Home` - the address of a patient's mobile home, parked for a specific period of time, e.g. the address of a caravan park
    * `Holiday Home` - the address for a patient during a holiday
    
    A patient can also register temporarily at a GP practice using a temporary address. Temporary GP registration information does not appear on the PDS, but the address used for it may.
    """
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactRelationshipCoding:
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Coded value for contact relationship."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the contact relationship code."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL of Code System that describes available contact relationships."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactRelationship:
    
    coding: list[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactRelationshipCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    r"""Exactly one contact relationship."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomExtensionURL(str, Enum):
    r"""Definition of other contact system extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_OTHER_CONTACT_SYSTEM = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-OtherContactSystem'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomExtensionValueCoding:
    r"""URL of specification of other contact systems."""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Coded value for the other contact system in place."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the other contact system code."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL of Code System that describes available contact relationships."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomExtension:
    r"""Wrapped object for other contact system details."""
    
    url: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Definition of other contact system extension."""
    value_coding: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomExtensionValueCoding] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCoding'), 'exclude': lambda f: f is None }})
    r"""URL of specification of other contact systems."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomSystem(str, Enum):
    r"""Means of communication, such as phone or email."""
    PHONE = 'phone'
    FAX = 'fax'
    EMAIL = 'email'
    OTHER = 'other'

class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomUse(str, Enum):
    r"""Location associated with communication system."""
    HOME = 'home'
    WORK = 'work'
    TEMP = 'temp'
    MOBILE = 'mobile'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecom:
    r"""A contact point, such as a phone number or email address"""
    
    system: SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomSystem = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""Means of communication, such as phone or email."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Phone number, email address, or other identifier for use with contact system."""
    extension: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Extension that is returned when the communication type is `textphone`. The only code returned is `textphone`, which means `Minicom (Textphone)`.
    
    The `system` is `other` when the extension is included.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique object identifier for this contact point."""
    period: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    use: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecomUse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use'), 'exclude': lambda f: f is None }})
    r"""Location associated with communication system."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContact:
    
    relationship: list[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactRelationship] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationship') }})
    r"""The contact relationship wrapper object that holds the details of the relationship to the patient.
    
    This is only returned when an Emergency Contact number has been set on `telecom`. The only valid code is `C`, which means `Emergency Contact`.
    """
    telecom: list[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactTelecom] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telecom') }})
    r"""List of Telecom objects on the contact only contains `system` and `value`."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    period: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContactPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension2URL(str, Enum):
    r"""Key of this object. Always `systemEffectiveDate`."""
    SYSTEM_EFFECTIVE_DATE = 'systemEffectiveDate'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension2:
    r"""Wrapper object for death notification effective date."""
    
    url: SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension2URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `systemEffectiveDate`."""
    value_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time at which death notification status took effect."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1URL(str, Enum):
    r"""Key of this object. Always `deathNotificationStatus`."""
    DEATH_NOTIFICATION_STATUS = 'deathNotificationStatus'

class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1ValueCodeableConceptCodingCode(str, Enum):
    r"""Symbol, in syntax, defined by the system:
    * `1` - Informal - death notice received via an update from a local NHS Organisation such as GP or Trust
    * `2` - Formal - death notice received from Registrar of Deaths. Only these endpoints are allowed to add a Formal death:
        - National Back Office using the Demographic Spine Application (DSA)
        - Office of National Statistics (ONS)
        - Maternity sites
    * `U` - Removed. This is a possible response, but it cannot be used on an update because Spine will reject it
    """
    ONE = '1'
    TWO = '2'
    U = 'U'

class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1ValueCodeableConceptCodingDisplay(str, Enum):
    r"""Representation defined by the system."""
    INFORMAL_DEATH_NOTICE_RECEIVED_VIA_AN_UPDATE_FROM_A_LOCAL_NHS_ORGANISATION_SUCH_AS_GP_OR_TRUST = 'Informal - death notice received via an update from a local NHS Organisation such as GP or Trust'
    FORMAL_DEATH_NOTICE_RECEIVED_FROM_REGISTRAR_OF_DEATHS = 'Formal - death notice received from Registrar of Deaths'
    REMOVED = 'Removed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1ValueCodeableConceptCoding:
    
    code: SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1ValueCodeableConceptCodingCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Symbol, in syntax, defined by the system:
    * `1` - Informal - death notice received via an update from a local NHS Organisation such as GP or Trust
    * `2` - Formal - death notice received from Registrar of Deaths. Only these endpoints are allowed to add a Formal death:
        - National Back Office using the Demographic Spine Application (DSA)
        - Office of National Statistics (ONS)
        - Maternity sites
    * `U` - Removed. This is a possible response, but it cannot be used on an update because Spine will reject it
    """
    system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""URI of the coding system specification."""
    display: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1ValueCodeableConceptCodingDisplay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the coding system in use."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1ValueCodeableConcept:
    r"""Death Notification Status."""
    
    coding: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1ValueCodeableConceptCoding]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding'), 'exclude': lambda f: f is None }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1:
    r"""Wrapper object for death notification status code."""
    
    url: SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `deathNotificationStatus`."""
    value_codeable_concept: SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1Extension1ValueCodeableConcept = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept') }})
    r"""Death Notification Status."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1URL(str, Enum):
    r"""Definition of death notification extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_DEATH_NOTIFICATION_STATUS = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-DeathNotificationStatus'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1:
    r"""Wrapper object for death notification details."""
    
    extension: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension') }})
    r"""Array containing exactly one death notification status code object and exactly one effective date object."""
    url: SearchPatient200ApplicationFhirPlusJSONEntryResourceExtension1URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Definition of death notification extension."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceGender(str, Enum):
    r"""Classification of the gender of a patient. The classification is phenotypical rather than genotypical, i.e. it does not provide codes for medical or scientific purposes.
    It is the administrative gender that the patient wishes to be known as. In some cases, this may not be the same as the patientâ€™s registered birth gender, or their current clinical gender.
    """
    MALE = 'male'
    FEMALE = 'female'
    OTHER = 'other'
    UNKNOWN = 'unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceGeneralPractitionerIdentifierPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceGeneralPractitionerIdentifier:
    r"""Identifier and system of identification used for this Organisation."""
    
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Organisation code for the registered general practice, as held in the [Organisation Data Service](https://developer.nhs.uk/apis/ods/)."""
    period: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceGeneralPractitionerIdentifierPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL for the Organisation Data Service - who are responsible for publishing codes that identify organisations and individuals across health and social care."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceGeneralPractitioner:
    r"""General practice (not practitioner) with which the patient is or was registered."""
    
    identifier: SearchPatient200ApplicationFhirPlusJSONEntryResourceGeneralPractitionerIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})
    r"""Identifier and system of identification used for this Organisation."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Object identifier (OID) specific to the returned details - this should be return exactly the same in any update."""
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of Reference being returned."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifierExtensionURL(str, Enum):
    r"""URL of the extension definition."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_NHS_NUMBER_VERIFICATION_STATUS = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifierExtensionValueCodeableConceptCoding:
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Symbol in syntax defined by the system."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URI of the coding system specification."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the coding system in use."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifierExtensionValueCodeableConcept:
    r"""NHS Number Verification Status Indicator."""
    
    coding: list[SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifierExtensionValueCodeableConceptCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifierExtension:
    r"""Status indicating if NHS number is present and verified."""
    
    url: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifierExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL of the extension definition."""
    value_codeable_concept: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifierExtensionValueCodeableConcept] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept'), 'exclude': lambda f: f is None }})
    r"""NHS Number Verification Status Indicator."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifier:
    
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The patient's NHS number. The primary identifier of a patient, unique within NHS England and Wales. Always 10 digits and must be a [valid NHS number](https://www.datadictionary.nhs.uk/attributes/nhs_number.html)."""
    extension: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifierExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""FHIR extensions."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""System identifier belongs to."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceMetaSecurityCode(str, Enum):
    r"""Code defined by the system value set."""
    U = 'U'
    R = 'R'
    V = 'V'
    REDACTED = 'REDACTED'

class SearchPatient200ApplicationFhirPlusJSONEntryResourceMetaSecurityDisplay(str, Enum):
    r"""Representation defined by the system."""
    UNRESTRICTED = 'unrestricted'
    RESTRICTED = 'restricted'
    VERY_RESTRICTED = 'very restricted'
    REDACTED = 'redacted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceMetaSecurity:
    
    code: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceMetaSecurityCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Code defined by the system value set."""
    display: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceMetaSecurityDisplay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URI of the value set specification."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceMeta:
    r"""Metadata about this resource."""
    
    security: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceMetaSecurity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security'), 'exclude': lambda f: f is None }})
    r"""The level of security on the patients record, which affects which fields are populated on retrieval. The possible responses are:
    * U - unrestricted. All available data is returned.
    * R - restricted. Any sensitive data around the patient's location, so `address`, `generalPractitioner` and `telecom`, are removed from the response.
    * V - very restricted. All patient data is removed from the response apart from `id`, `identifier` and `meta` fields. The `gender` field returns `unknown` regardless of actual gender.
    * REDACTED - redacted. The patient record has been marked as invalid, so the data should not be used. This code is never returned; you receive a 404, and appropriate error response, if an invalidated patient retrieval is attempted.
    """
    version_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versionId'), 'exclude': lambda f: f is None }})
    r"""The NHS Digital assigned version of the patient resource."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceNamePeriod:
    r"""Business effective period when name was, is, or will be in use."""
    
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceNameUse(str, Enum):
    r"""How this name should be used.
    * usual - Known as, conventional or the one patient normally uses. A patient always has a usual name.
    * temp - An alias or temporary name. This may also be used for temporary names assigned at birth or in emergency situations.
    * nickname - A name that the patient prefers to be addressed by, but is not part of their usual name.
    * old - This name is no longer in use (or was never correct, but retained for records).
    * maiden - Name changed for Marriage. A name used prior to changing name because of marriage. This term is not gender specific. The use of this term does not imply any particular history for a person's name.
    
    The following use codes are included in the [name-use](https://www.hl7.org/fhir/valueset-name-use.html) value set, but should not be used and is not be returned as part of a retrieval.
    * official - The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called \"legal name\".
    * anonymous - Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons).
    """
    USUAL = 'usual'
    TEMP = 'temp'
    NICKNAME = 'nickname'
    OLD = 'old'
    MAIDEN = 'maiden'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceName:
    
    family: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('family') }})
    r"""Family name (often called Surname)."""
    use: SearchPatient200ApplicationFhirPlusJSONEntryResourceNameUse = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use') }})
    r"""How this name should be used.
    * usual - Known as, conventional or the one patient normally uses. A patient always has a usual name.
    * temp - An alias or temporary name. This may also be used for temporary names assigned at birth or in emergency situations.
    * nickname - A name that the patient prefers to be addressed by, but is not part of their usual name.
    * old - This name is no longer in use (or was never correct, but retained for records).
    * maiden - Name changed for Marriage. A name used prior to changing name because of marriage. This term is not gender specific. The use of this term does not imply any particular history for a person's name.
    
    The following use codes are included in the [name-use](https://www.hl7.org/fhir/valueset-name-use.html) value set, but should not be used and is not be returned as part of a retrieval.
    * official - The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called \"legal name\".
    * anonymous - Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons).
    """
    given: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('given'), 'exclude': lambda f: f is None }})
    r"""Given names, including any middle names.
    
    Each name(s) should be a separate item in the list. The first given name may include multiple names, separated by a space.
    Subsequent names must be broken down into list items. For example, the input `[Jane Marie Anne, Jo Adele]` returns `[Jane Marie Anne, Jo, Adele]`.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique object identifier for this name."""
    period: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceNamePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    prefix: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix'), 'exclude': lambda f: f is None }})
    r"""Name prefixes, titles, and prenominals."""
    suffix: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suffix'), 'exclude': lambda f: f is None }})
    r"""Name suffices and postnominals."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomExtensionURL(str, Enum):
    r"""Definition of other contact system extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_OTHER_CONTACT_SYSTEM = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-OtherContactSystem'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomExtensionValueCoding:
    r"""URL of specification of other contact systems."""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Coded value for the other contact system in place."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the other contact system code."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL of Code System that describes available contact relationships."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomExtension:
    r"""Wrapped object for other contact system details."""
    
    url: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Definition of other contact system extension."""
    value_coding: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomExtensionValueCoding] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCoding'), 'exclude': lambda f: f is None }})
    r"""URL of specification of other contact systems."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    
class SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomSystem(str, Enum):
    r"""Means of communication, such as phone or email."""
    PHONE = 'phone'
    FAX = 'fax'
    EMAIL = 'email'
    OTHER = 'other'

class SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomUse(str, Enum):
    r"""Location associated with communication system."""
    HOME = 'home'
    WORK = 'work'
    TEMP = 'temp'
    MOBILE = 'mobile'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecom:
    r"""A contact point, such as a phone number or email address"""
    
    system: SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomSystem = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""Means of communication, such as phone or email."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Phone number, email address, or other identifier for use with contact system."""
    extension: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Extension that is returned when the communication type is `textphone`. The only code returned is `textphone`, which means `Minicom (Textphone)`.
    
    The `system` is `other` when the extension is included.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique object identifier for this contact point."""
    period: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    use: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecomUse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use'), 'exclude': lambda f: f is None }})
    r"""Location associated with communication system."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntryResource:
    
    address: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""List of addresses associated with the patient.
    
    This is only fully populated on a retrieval or a successful update, only the `home` address is returned on a search.
    When a patient tagged as `restricted` or `very restricted` is retrieved, all addresses are removed from the response.
    """
    birth_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birthDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the patient was born or is officially deemed to have been born.
    
    It is a date in the format `yyyy-mm-dd`. Due to data quality issues on a small number of patients `yyyy-mm` and `yyyy` format may also be returned.
    
    When a patient tagged as `very restricted` is retrieved, birth date is removed from the response.
    """
    contact: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceSchemaForAPatientContact]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact'), 'exclude': lambda f: f is None }})
    r"""A list of patient contacts. Only emergency contacts are returned. Any other contacts are returned on the patients `Related Person`.
    When a patient tagged as `restricted` or `very restricted` is retrieved, all contacts are removed from the response.
    """
    deceased_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deceasedDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time on which a person died or is officially deemed to have died, if applicable and known.
    
    It is a datetime in the format `yyyy-mm-ddTHH:MM:SS+HH:MM` or `yyyy-mm-dd`. Due to data quality issues on a small number of patients `yyyy-mm` and `yyyy` format may also be returned.
    
    When a patient tagged as `very restricted` is retrieved, death date is removed from the response.
    """
    extension: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Wrapper array for the patient's death notification status; this is a FHIR extension. Always contains zero or one death notification status object."""
    gender: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceGender] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""Classification of the gender of a patient. The classification is phenotypical rather than genotypical, i.e. it does not provide codes for medical or scientific purposes.
    It is the administrative gender that the patient wishes to be known as. In some cases, this may not be the same as the patientâ€™s registered birth gender, or their current clinical gender.
    """
    general_practitioner: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceGeneralPractitioner]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generalPractitioner'), 'exclude': lambda f: f is None }})
    r"""General Practice (not practitioner) with which the patient is, or was, registered. Always contains zero or one general practitioner object.
    When a patient tagged as `restricted` or `very restricted` is retrieved, the General Practice is removed from the response.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The patient's NHS number. The primary identifier of a patient, unique within NHS England and Wales. Always 10 digits and must be a [valid NHS number](https://www.datadictionary.nhs.uk/attributes/nhs_number.html)."""
    identifier: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier'), 'exclude': lambda f: f is None }})
    r"""Identifier and system of identification used for this Patient."""
    meta: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResourceMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""Metadata about this resource."""
    multiple_birth_integer: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipleBirthInteger'), 'exclude': lambda f: f is None }})
    r"""The order in which the patient was born, with 1 indicating the first or only birth in the sequence, 2 indicating the second birth in the sequence, 3 indicating the third, and so on up to 7.
    
    There are two other valid values; `8` meaning `Not applicable` and `9` meaning `Not known`.
    """
    name: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceName]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""List of names associated with the patient.
    This is only fully populated on a retrieval or a successful update, only the `usual`, `nickname` and `temp` names are returned on a search.
    
    When a patient tagged as `very restricted` is retrieved, all names are removed from the response.
    """
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""FHIR resource type."""
    telecom: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntryResourceTelecom]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telecom'), 'exclude': lambda f: f is None }})
    r"""List of contact points for the patient; for example, phone numbers or email addresses.
    When a patient tagged as `restricted` or `very restricted` is retrieved, all contact points are removed from the response.
    """
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntrySearch:
    
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Search score from 0.0 to 1.0."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSONEntry:
    
    full_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullUrl'), 'exclude': lambda f: f is None }})
    r"""Absolute URL of the resource described in this item."""
    resource: Optional[SearchPatient200ApplicationFhirPlusJSONEntryResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource'), 'exclude': lambda f: f is None }})
    search: Optional[SearchPatient200ApplicationFhirPlusJSONEntrySearch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search'), 'exclude': lambda f: f is None }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchPatient200ApplicationFhirPlusJSON:
    r"""A completed search. This might contain zero, one or many matching patients, or it might contain a 'TOO_MANY_MATCHES' error."""
    
    entry: Optional[list[SearchPatient200ApplicationFhirPlusJSONEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entry'), 'exclude': lambda f: f is None }})
    r"""A list of matched patients. Empty if none found. The patients are ordered by match score, best first. A maximum of 50 patients are returned."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""FHIR Resource Type."""
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""Time the search was performed."""
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Number of resources returned in search."""
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""FHIR Bundle Type."""
    

@dataclasses.dataclass
class SearchPatientResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    search_patient_200_application_fhir_plus_json_object: Optional[SearchPatient200ApplicationFhirPlusJSON] = dataclasses.field(default=None)
    r"""A completed search. This might contain zero, one or many matching patients, or it might contain a 'TOO_MANY_MATCHES' error."""
    search_patient_4_xx_application_fhir_plus_json_object: Optional[SearchPatient4XXApplicationFhirPlusJSON] = dataclasses.field(default=None)
    r"""An error occurred as follows:
    
    | HTTP status | Error code                 | Description |
    | ----------- | -------------------------- | --------------------------------------------- |
    | 200         | TOO_MANY_MATCHES           | Too many matches were found - user should be told to refine their search parameters.	|
    | 400         | INVALID_SEARCH_DATA	       | Invalid combination of search parameters. For details, see the `diagnostics` field. |
    | 400         | UNSUPPORTED_SERVICE        | No search parameters provided. |
    | 400         | MISSING_VALUE              | Missing header or query parameter. For details, see the `diagnostics` field. |
    | 400         | INVALID_VALUE              | Invalid header or query parameter. For details, see the `diagnostics` field. |
    | 400         | ADDITIONAL_PROPERTIES      | Unrecognised query parameter. For details, see the `diagnostics` field. |
    | 401         | ACCESS_DENIED              | Access token missing, invalid or expired, or calling application not configured for this operation. |
    | 403         | INVALID_VALUE              | Multiple results requested when using the API in application-restricted mode. |
    | 408         | UNABLE_TO_CALL_SERVICE     | The downstream domain processing has not completed within the configured timeout period. |
    | 429         | TOO_MANY_REQUESTS          | You have exceeded your application's [rate limit](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#rate-limits). |
    """
    