"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from pds_fhir import utils
from typing import Any, Optional

class UpdatePatientPartialRequestBodyPatchesOp(str, Enum):
    REMOVE = 'remove'
    ADD = 'add'
    REPLACE = 'replace'
    TEST = 'test'



@dataclasses.dataclass
class UpdatePatientPartialRequestBodyPatchesValue3:
    r"""The information to be added or replaced. Should not be included on a remove."""
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartialRequestBodyPatches:
    op: UpdatePatientPartialRequestBodyPatchesOp = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op') }})
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""The location of the information to remove, add or replace. The '-' character must be used to add new items to arrays, e.g. names, addresses.
    https://tools.ietf.org/html/rfc6901 - IETF RFC 6901 JavaScript Object Notation (JSON) Pointer.
    """
    value: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The information to be added or replaced. Should not be included on a remove."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartialRequestBody:
    patches: list[UpdatePatientPartialRequestBodyPatches] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patches') }})
    




@dataclasses.dataclass
class UpdatePatientPartialRequest:
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The patient's NHS number. The primary identifier of a patient, unique within NHS England and Wales. Always 10 digits and must be a [valid NHS number](https://www.datadictionary.nhs.uk/attributes/nhs_number.html)."""
    if_match: str = dataclasses.field(metadata={'header': { 'field_name': 'If-Match', 'style': 'simple', 'explode': False }})
    r"""Latest known version identifier enclosed in quotes preceded by `W/`.
    
    Send the value of the patient's `ETag` response header on patient retrieval when updating a patient.
    This is to ensure that any updates are applied against an up-to-date version of the patient resource.
    """
    request_body: UpdatePatientPartialRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json-patch+json' }})
    nhsd_end_user_organisation_ods: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'NHSD-End-User-Organisation-ODS', 'style': 'simple', 'explode': False }})
    r"""The ODS code of an End User Organisation (EUO). Currently optional but will be updated to be mandatory for client applications which service multiple End User organisations, in order to correctly attribute calls to each EUO. Date of change to a mandatory field to be defined."""
    nhsd_session_urid: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'NHSD-Session-URID', 'style': 'simple', 'explode': False }})
    r"""The user role ID (URID) for the current session. Also known as a user role profile ID (URPID).
    
    This header is optional.
    
    In Application-restricted access mode this header is ignored.
    
    In Healthcare worker access mode if you send this header it must be valid for the logged-in user. See [determine the user's role](https://digital.nhs.uk/developer/guides-and-documentation/security-and-authorisation/user-restricted-restful-apis-nhs-cis2-separate-authentication-and-authorisation#step-9-determine-the-user-s-role) for guidance.
    """
    x_correlation_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Correlation-ID', 'style': 'simple', 'explode': False }})
    r"""An optional ID which you can use to track transactions across multiple systems. It can take any value, but we recommend avoiding `.` characters.
    
    Mirrored back in a response header.
    """
    x_request_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Request-ID', 'style': 'simple', 'explode': False }})
    r"""A globally unique identifier (GUID) for the request, which we use to de-duplicate repeated requests and to trace the request if you contact our helpdesk.
    
    Must be a universally unique identifier (UUID) (ideally version 4).
    
    Mirrored back in a response header.
    
    If you re-send a failed request, use the same value in this header.
    """
    


class UpdatePatientPartial503ApplicationFhirPlusJSONIssueCode(str, Enum):
    r"""FHIR error code."""
    INVALID = 'invalid'
    STRUCTURE = 'structure'
    REQUIRED = 'required'
    VALUE = 'value'
    INVARIANT = 'invariant'
    SECURITY = 'security'
    LOGIN = 'login'
    UNKNOWN = 'unknown'
    EXPIRED = 'expired'
    FORBIDDEN = 'forbidden'
    SUPPRESSED = 'suppressed'
    PROCESSING = 'processing'
    NOT_SUPPORTED = 'not-supported'
    DUPLICATE = 'duplicate'
    MULTIPLE_MATCHES = 'multiple-matches'
    NOT_FOUND = 'not-found'
    DELETED = 'deleted'
    TOO_LONG = 'too-long'
    CODE_INVALID = 'code-invalid'
    EXTENSION = 'extension'
    TOO_COSTLY = 'too-costly'
    BUSINESS_RULE = 'business-rule'
    CONFLICT = 'conflict'
    TRANSIENT = 'transient'
    LOCK_ERROR = 'lock-error'
    NO_STORE = 'no-store'
    EXCEPTION = 'exception'
    TIMEOUT = 'timeout'
    INCOMPLETE = 'incomplete'
    THROTTLED = 'throttled'
    INFORMATIONAL = 'informational'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial503ApplicationFhirPlusJSONIssueDetailsCoding:
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Symbol in syntax defined by the system."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URI of the coding system specification."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the coding system in use."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial503ApplicationFhirPlusJSONIssueDetails:
    r"""Internal error code."""
    coding: Optional[list[UpdatePatientPartial503ApplicationFhirPlusJSONIssueDetailsCoding]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding'), 'exclude': lambda f: f is None }})
    


class UpdatePatientPartial503ApplicationFhirPlusJSONIssueSeverity(str, Enum):
    r"""Severity of the error."""
    FATAL = 'fatal'
    ERROR = 'error'
    WARNING = 'warning'
    INFORMATION = 'information'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial503ApplicationFhirPlusJSONIssue:
    code: UpdatePatientPartial503ApplicationFhirPlusJSONIssueCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""FHIR error code."""
    severity: UpdatePatientPartial503ApplicationFhirPlusJSONIssueSeverity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity') }})
    r"""Severity of the error."""
    details: Optional[UpdatePatientPartial503ApplicationFhirPlusJSONIssueDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Internal error code."""
    diagnostics: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnostics'), 'exclude': lambda f: f is None }})
    r"""Additional diagnostic information about the issue. This information is subject to change."""
    expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expression'), 'exclude': lambda f: f is None }})
    r"""FHIRPath of element(s) related to the error."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial503ApplicationFhirPlusJSON:
    r"""Outcome of an operation that does not result in a resource or bundle being returned, for example an error or an async/batch submission.
    There are a number of possible error codes that can be returned along with a more detailed description in the `display` field.
    """
    issue: Optional[list[UpdatePatientPartial503ApplicationFhirPlusJSONIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue'), 'exclude': lambda f: f is None }})
    r"""List of issues that have occurred."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""FHIR Resource Type."""
    


class UpdatePatientPartial4XXApplicationFhirPlusJSONIssueCode(str, Enum):
    r"""FHIR error code."""
    INVALID = 'invalid'
    STRUCTURE = 'structure'
    REQUIRED = 'required'
    VALUE = 'value'
    INVARIANT = 'invariant'
    SECURITY = 'security'
    LOGIN = 'login'
    UNKNOWN = 'unknown'
    EXPIRED = 'expired'
    FORBIDDEN = 'forbidden'
    SUPPRESSED = 'suppressed'
    PROCESSING = 'processing'
    NOT_SUPPORTED = 'not-supported'
    DUPLICATE = 'duplicate'
    MULTIPLE_MATCHES = 'multiple-matches'
    NOT_FOUND = 'not-found'
    DELETED = 'deleted'
    TOO_LONG = 'too-long'
    CODE_INVALID = 'code-invalid'
    EXTENSION = 'extension'
    TOO_COSTLY = 'too-costly'
    BUSINESS_RULE = 'business-rule'
    CONFLICT = 'conflict'
    TRANSIENT = 'transient'
    LOCK_ERROR = 'lock-error'
    NO_STORE = 'no-store'
    EXCEPTION = 'exception'
    TIMEOUT = 'timeout'
    INCOMPLETE = 'incomplete'
    THROTTLED = 'throttled'
    INFORMATIONAL = 'informational'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial4XXApplicationFhirPlusJSONIssueDetailsCoding:
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Symbol in syntax defined by the system."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URI of the coding system specification."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the coding system in use."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial4XXApplicationFhirPlusJSONIssueDetails:
    r"""Internal error code."""
    coding: Optional[list[UpdatePatientPartial4XXApplicationFhirPlusJSONIssueDetailsCoding]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding'), 'exclude': lambda f: f is None }})
    


class UpdatePatientPartial4XXApplicationFhirPlusJSONIssueSeverity(str, Enum):
    r"""Severity of the error."""
    FATAL = 'fatal'
    ERROR = 'error'
    WARNING = 'warning'
    INFORMATION = 'information'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial4XXApplicationFhirPlusJSONIssue:
    code: UpdatePatientPartial4XXApplicationFhirPlusJSONIssueCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""FHIR error code."""
    severity: UpdatePatientPartial4XXApplicationFhirPlusJSONIssueSeverity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity') }})
    r"""Severity of the error."""
    details: Optional[UpdatePatientPartial4XXApplicationFhirPlusJSONIssueDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Internal error code."""
    diagnostics: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnostics'), 'exclude': lambda f: f is None }})
    r"""Additional diagnostic information about the issue. This information is subject to change."""
    expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expression'), 'exclude': lambda f: f is None }})
    r"""FHIRPath of element(s) related to the error."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial4XXApplicationFhirPlusJSON:
    r"""Outcome of an operation that does not result in a resource or bundle being returned, for example an error or an async/batch submission.
    There are a number of possible error codes that can be returned along with a more detailed description in the `display` field.
    """
    issue: Optional[list[UpdatePatientPartial4XXApplicationFhirPlusJSONIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue'), 'exclude': lambda f: f is None }})
    r"""List of issues that have occurred."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""FHIR Resource Type."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONAddressExtensionExtension2:
    r"""Value of the address key."""
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Always 'value'."""
    value_string: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueString') }})
    r"""Address key in PAF format. An 8 digit number including leading zeroes, formatted as a string."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONAddressExtensionExtension1ValueCoding:
    r"""URL of specification of address key format."""
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Address Key system. Always 'PAF'."""
    system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""URL of Code System that describes available Address Key formats."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONAddressExtensionExtension1:
    r"""Coding system of the address key."""
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Always 'type'."""
    value_coding: UpdatePatientPartial200ApplicationFhirPlusJSONAddressExtensionExtension1ValueCoding = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCoding') }})
    r"""URL of specification of address key format."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONAddressExtensionURL(str, Enum):
    r"""URL of specification of the AddressKey extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_ADDRESS_KEY = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-AddressKey'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONAddressExtension:
    r"""Unique identifier for an address."""
    extension: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Specification of address key system and address key value. Contains exactly two items: one describing the code system the Address Key uses, and the other specifying the value of the Address Key."""
    url: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONAddressExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL of specification of the AddressKey extension."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONAddressPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONAddressText(str, Enum):
    r"""Where a `temp` address is provided a descriptor text must be sent.
    The list of possible values are:
    * `Second Home` - a patient's second home
    * `Student Accommodation` - a patient's place of residence while at university
    * `Respite Care Address` - where the patient resides during respite care
    * `Temporary Residence Address` - where the patient resides for a specific period of time
    * `Convalescence Home` - the address for a patient during a period of recovery
    * `Mobile Home` - the address of a patient's mobile home, parked for a specific period of time, e.g. the address of a caravan park
    * `Holiday Home` - the address for a patient during a holiday
    
    A patient can also register temporarily at a GP practice using a temporary address. Temporary GP registration information does not appear on the PDS, but the address used for it may.
    """
    SECOND_HOME = 'Second Home'
    STUDENT_ACCOMMODATION = 'Student Accommodation'
    RESPITE_CARE_ADDRESS = 'Respite Care Address'
    TEMPORARY_RESIDENCE_ADDRESS = 'Temporary Residence Address'
    CONVALESCENCE_HOME = 'Convalescence Home'
    MOBILE_HOME = 'Mobile Home'
    HOLIDAY_HOME = 'Holiday Home'

class UpdatePatientPartial200ApplicationFhirPlusJSONAddressUse(str, Enum):
    r"""Purpose of this address:
      * `home` - the home address is the patient's normal residence. Home address is also known as usual, main, registered, current or permanent address
      * `temp` - a temporary address is an address used for a set period of time, but where the patient's home, permanent address remains unchanged
      * `billing` - an address used for correspondence purposes only
      * `work` - an office address. This can be returned due to legacy data but cannot be added or replaced on update
    
      A patient should have no more than one current `temp` and/or `billing` address.
      However, historically this was constrained only by the integration requirements and was not enforced so theoretically more than one can exist for a patient when retrieving.
      Where multiple instances already exist for the patient it is not expected that local systems should manage those, but should choose the most appropriate one to maintain (e.g. by examining period dates).
    
      A `home` address is the patient's main residential address and should normally be used for all clinical and demographic purposes, including clinical and appointment correspondence.
      However additionally, `temp` and `billing` addresses may be provided by a patient when there is a requirement to record an alternative location for the purposes of unbroken care.
      When sending correspondence to a patient:
      *	a present and valid `billing` address may take precedence over `home` and `temp` addresses. A patient should have only a single current `billing` address. An address is considered 'valid' according to its period start and end dates.
      *	if no current `billing` address is provided, a `temp` address may take precedence over the `home` address, again if it is valid according to its period start and end dates.
      * if there is no valid, current `billing` and/or `temp` address, the `home` address must be used.
    """
    HOME = 'home'
    WORK = 'work'
    TEMP = 'temp'
    BILLING = 'billing'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONAddress:
    r"""An address associated with the patient."""
    use: UpdatePatientPartial200ApplicationFhirPlusJSONAddressUse = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use') }})
    r"""Purpose of this address:
      * `home` - the home address is the patient's normal residence. Home address is also known as usual, main, registered, current or permanent address
      * `temp` - a temporary address is an address used for a set period of time, but where the patient's home, permanent address remains unchanged
      * `billing` - an address used for correspondence purposes only
      * `work` - an office address. This can be returned due to legacy data but cannot be added or replaced on update
    
      A patient should have no more than one current `temp` and/or `billing` address.
      However, historically this was constrained only by the integration requirements and was not enforced so theoretically more than one can exist for a patient when retrieving.
      Where multiple instances already exist for the patient it is not expected that local systems should manage those, but should choose the most appropriate one to maintain (e.g. by examining period dates).
    
      A `home` address is the patient's main residential address and should normally be used for all clinical and demographic purposes, including clinical and appointment correspondence.
      However additionally, `temp` and `billing` addresses may be provided by a patient when there is a requirement to record an alternative location for the purposes of unbroken care.
      When sending correspondence to a patient:
      *	a present and valid `billing` address may take precedence over `home` and `temp` addresses. A patient should have only a single current `billing` address. An address is considered 'valid' according to its period start and end dates.
      *	if no current `billing` address is provided, a `temp` address may take precedence over the `home` address, again if it is valid according to its period start and end dates.
      * if there is no valid, current `billing` and/or `temp` address, the `home` address must be used.
    """
    extension: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONAddressExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Postal Address File (PAF) key associated with this address formatted as a FHIR extension. Empty if no PAF key for the address is known, or an object specifying the code system of the address key and the value of the address key."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique system identifier for this address."""
    line: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line'), 'exclude': lambda f: f is None }})
    r"""All lines of the address except the postal code.
    
    Systems must apply the following formatting convention when adding or replacing addresses lines:
    *	line 1 - premises ID and/or house name, e.g. `Flat 1` or `The Old Schoolhouse`
    *	line 2 - house number, dependent thoroughfare name and descriptor (if present), thoroughfare name and descriptor, e.g. `23 Mill Lane`
    *	line 3 - dependent locality/village, locality (if present), e.g. `Boxgrove`
    *	line 4 - post town, e.g. `Leeds`
    *	line 5 - county (if present), e.g. `West Yorkshire`
    
    If any of the lines are blank, they are not returned due to FHIR conformance constraints.
    """
    period: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONAddressPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code of the address."""
    text: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONAddressText] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Where a `temp` address is provided a descriptor text must be sent.
    The list of possible values are:
    * `Second Home` - a patient's second home
    * `Student Accommodation` - a patient's place of residence while at university
    * `Respite Care Address` - where the patient resides during respite care
    * `Temporary Residence Address` - where the patient resides for a specific period of time
    * `Convalescence Home` - the address for a patient during a period of recovery
    * `Mobile Home` - the address of a patient's mobile home, parked for a specific period of time, e.g. the address of a caravan park
    * `Holiday Home` - the address for a patient during a holiday
    
    A patient can also register temporarily at a GP practice using a temporary address. Temporary GP registration information does not appear on the PDS, but the address used for it may.
    """
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactRelationshipCoding:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Coded value for contact relationship."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the contact relationship code."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL of Code System that describes available contact relationships."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactRelationship:
    coding: list[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactRelationshipCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    r"""Exactly one contact relationship."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomExtensionURL(str, Enum):
    r"""Definition of other contact system extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_OTHER_CONTACT_SYSTEM = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-OtherContactSystem'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomExtensionValueCoding:
    r"""URL of specification of other contact systems."""
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Coded value for the other contact system in place."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the other contact system code."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL of Code System that describes available contact relationships."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomExtension:
    r"""Wrapped object for other contact system details."""
    url: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Definition of other contact system extension."""
    value_coding: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomExtensionValueCoding] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCoding'), 'exclude': lambda f: f is None }})
    r"""URL of specification of other contact systems."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomSystem(str, Enum):
    r"""Means of communication, such as phone or email."""
    PHONE = 'phone'
    FAX = 'fax'
    EMAIL = 'email'
    OTHER = 'other'

class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomUse(str, Enum):
    r"""Location associated with communication system."""
    HOME = 'home'
    WORK = 'work'
    TEMP = 'temp'
    MOBILE = 'mobile'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecom:
    r"""A contact point, such as a phone number or email address"""
    system: UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomSystem = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""Means of communication, such as phone or email."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Phone number, email address, or other identifier for use with contact system."""
    extension: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Extension that is returned when the communication type is `textphone`. The only code returned is `textphone`, which means `Minicom (Textphone)`.
    
    The `system` is `other` when the extension is included.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique object identifier for this contact point."""
    period: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    use: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecomUse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use'), 'exclude': lambda f: f is None }})
    r"""Location associated with communication system."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContact:
    relationship: list[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactRelationship] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationship') }})
    r"""The contact relationship wrapper object that holds the details of the relationship to the patient.
    
    This is only returned when an Emergency Contact number has been set on `telecom`. The only valid code is `C`, which means `Emergency Contact`.
    """
    telecom: list[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactTelecom] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telecom') }})
    r"""List of Telecom objects on the contact only contains `system` and `value`."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    period: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContactPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension2URL(str, Enum):
    r"""Key of this object. Always `effectiveTime`."""
    EFFECTIVE_TIME = 'effectiveTime'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension2ValuePeriod:
    r"""The effective time of removal of the Patient record from PDS."""
    start: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension2:
    r"""Wrapper object for removal from registration effective time."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension2URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `effectiveTime`."""
    value_period: UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension2ValuePeriod = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valuePeriod') }})
    r"""The effective time of removal of the Patient record from PDS."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension1URL(str, Enum):
    r"""To identify the removal reason code."""
    REMOVAL_FROM_REGISTRATION_CODE = 'removalFromRegistrationCode'

class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension1ValueCodeableConceptCodingCode(str, Enum):
    r"""A CodeSystem that identifies the reason a PDS record has been removed."""
    DEA = 'DEA'
    EMB = 'EMB'
    SCT = 'SCT'
    NIT = 'NIT'
    TRA = 'TRA'
    ORR = 'ORR'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension1ValueCodeableConceptCoding:
    code: UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension1ValueCodeableConceptCodingCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""A CodeSystem that identifies the reason a PDS record has been removed."""
    display: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display') }})
    r"""Display-friendly representation of the removal reason exit code."""
    system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""URL of the Removal Reason Exit Code. Always uses the 'PDS-RemovalReasonExitCode' Code System."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension1ValueCodeableConcept:
    r"""PDS Removal Reason Exit Code"""
    coding: list[UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension1ValueCodeableConceptCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    r"""Array containing exactly one removal reason exit code object"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension1:
    r"""Wrapper object for removalFromRegistrationCode."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension1URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""To identify the removal reason code."""
    value_codeable_concept: UpdatePatientPartial200ApplicationFhirPlusJSONExtension8Extension1ValueCodeableConcept = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept') }})
    r"""PDS Removal Reason Exit Code"""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8URL(str, Enum):
    r"""Definition of the removal from registration extension."""
    HTTPS_FHIR_NHS_UK_STRUCTURE_DEFINITION_EXTENSION_PDS_REMOVAL_FROM_REGISTRATION = 'https://fhir.nhs.uk/StructureDefinition/Extension-PDS-RemovalFromRegistration'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension8:
    r"""An extension to carry the reason a PDS record has been removed from the Patient Demographic Service. This will only be populated on a retrieval and not a search."""
    extension: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension') }})
    r"""An extension reason a PDS record has been removed from the Patient Demographic Service."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension8URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Definition of the removal from registration extension."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension7URL(str, Enum):
    r"""Definition of place of birth extension."""
    HTTP_HL7_ORG_FHIR_STRUCTURE_DEFINITION_PATIENT_BIRTH_PLACE = 'http://hl7.org/fhir/StructureDefinition/patient-birthPlace'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension7ValueAddress:
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""Town or city of birth."""
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""A coded value for a patient's country of birth.
    
    From [ISO 3166-1](http://hl7.org/fhir/valueset-iso3166-1-3.html) plus codes from the UK Internal Code list which do not have entries in ISO 3166-1.
    
    UK Internal Codes:
    * `1` - England
    * `2` - Scotland
    * `3` - Wales
    * `4` - Northern Ireland
    * `7` - Sark
    * `9` - Alderney
    * `10` - Channel Islands
    """
    district: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('district'), 'exclude': lambda f: f is None }})
    r"""County or metropolitan district of birth."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension7:
    r"""Wrapper object for place of birth details. This will not be returned on a restricted patient."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension7URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Definition of place of birth extension."""
    value_address: UpdatePatientPartial200ApplicationFhirPlusJSONExtension7ValueAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueAddress') }})
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension3URL(str, Enum):
    r"""Key of this object. Always `PreferredContactTimes`."""
    PREFERRED_CONTACT_TIMES = 'PreferredContactTimes'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension3:
    r"""Wrapper object for preferred contact times."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension3URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `PreferredContactTimes`."""
    value_string: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueString') }})
    r"""A free-text description about the preferred contact times."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension2URL(str, Enum):
    r"""Key of this object. Always `PreferredContactMethod`."""
    PREFERRED_CONTACT_METHOD = 'PreferredContactMethod'

class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension2ValueCodeableConceptCodingSystem(str, Enum):
    r"""Definition of the preferred contact method extension."""
    HTTPS_FHIR_HL7_ORG_UK_CODE_SYSTEM_UK_CORE_PREFERRED_CONTACT_METHOD = 'https://fhir.hl7.org.uk/CodeSystem/UKCore-PreferredContactMethod'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension2ValueCodeableConceptCoding:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""A code to identify to identify the preferred contact method of a patient, contact or related person.
    * 1	- Letter
    * 2	- Visit
    * 3	- Telephone
    * 4	- E-mail
    * 5	- Minicom (Textphone)
    * 6	- Telephone contact via proxy
    * 7	- Sign language
    * 8	- No Telephone contact
    """
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the preferred contact method code."""
    system: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension2ValueCodeableConceptCodingSystem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""Definition of the preferred contact method extension."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension2ValueCodeableConcept:
    r"""Preferred Contact Method."""
    coding: list[UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension2ValueCodeableConceptCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension2:
    r"""Wrapper object for preferred contact method."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension2URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `PreferredContactMethod`."""
    value_codeable_concept: UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension2ValueCodeableConcept = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept') }})
    r"""Preferred Contact Method."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension1ValueCodeableConceptCodingSystem(str, Enum):
    r"""Definition of the preferred written communication extension."""
    HTTPS_FHIR_HL7_ORG_UK_CODE_SYSTEM_UK_CORE_PREFERRED_WRITTEN_COMMUNICATION_FORMAT = 'https://fhir.hl7.org.uk/CodeSystem/UKCore-PreferredWrittenCommunicationFormat'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension1ValueCodeableConceptCoding:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""A code to identify the preferred written communication format of a patient, contact or related person.
    * 11 - Large print
    * 12 - Braille
    * 13 - Audio tape
    """
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the preferred written communication format code."""
    system: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension1ValueCodeableConceptCodingSystem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""Definition of the preferred written communication extension."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension1ValueCodeableConcept:
    r"""Preferred Written Communication Format."""
    coding: list[UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension1ValueCodeableConceptCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension1:
    r"""Wrapper object for preferred written communication format."""
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `PreferredWrittenCommunicationFormat`."""
    value_codeable_concept: UpdatePatientPartial200ApplicationFhirPlusJSONExtension6Extension1ValueCodeableConcept = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept') }})
    r"""Preferred Written Communication Format."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6URL(str, Enum):
    r"""Definition of the contact preference extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_CONTACT_PREFERENCE = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-ContactPreference'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension6:
    r"""Wrapper object for preferred contact details; the written communication format, preferred contact time and method. This will only be populated on a retrieval and not a search."""
    extension: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension') }})
    r"""Wrapper array containing zero or one preferred contact method, zero or one preferred written communication format; and zero or one preferred contact time."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension6URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Definition of the contact preference extension."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension2URL(str, Enum):
    r"""Key of this object. Always `interpreterRequired`."""
    INTERPRETER_REQUIRED = 'interpreterRequired'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension2:
    r"""Wrapper object for whether an interpreter is required."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension2URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `interpreterRequired`."""
    value_boolean: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueBoolean') }})
    r"""Whether an interpreter is required."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension1URL(str, Enum):
    r"""Key of this object. Always `language`."""
    LANGUAGE = 'language'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension1ValueCodeableConceptCoding:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Language code based on [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) standard plus extensions for braille, makaton and sign languages, which are:
    * `q1` - Braille
    * `q2` - American Sign Language
    * `q3` - Australian Sign Language
    * `q4` - British Sign Language
    * `q5` - Makaton
    All valid codes combined can be found at https://fhir.hl7.org.uk/CodeSystem/UKCore-HumanLanguage.
    """
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the language code (such as English). If there is a language code with no defined mapping, `Unknown` will be returned."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL of the Language Code System. Always uses the 'UKCore-HumanLanguage' Code System."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the language code system."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension1ValueCodeableConcept:
    r"""Human language."""
    coding: list[UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension1ValueCodeableConceptCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    r"""Exactly one language code."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension1:
    r"""Wrapper object for communication language."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension1URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `language`."""
    value_codeable_concept: UpdatePatientPartial200ApplicationFhirPlusJSONExtension5Extension1ValueCodeableConcept = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept') }})
    r"""Human language."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension5URL(str, Enum):
    r"""Definition of communication extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_NHS_COMMUNICATION = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NHSCommunication'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension5:
    r"""Wrapper object for communication details. This will only be populated on a retrieval and not a search."""
    extension: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension') }})
    r"""Definition of communication extension, The array must have two items, a valueCodeableConcept for the language and a valueBoolean for if an interpreter is required."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension5URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Definition of communication extension."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension2URL(str, Enum):
    r"""Key of this object. Always `systemEffectiveDate`."""
    SYSTEM_EFFECTIVE_DATE = 'systemEffectiveDate'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension2:
    r"""Wrapper object for death notification effective date."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension2URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `systemEffectiveDate`."""
    value_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time at which death notification status took effect."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1URL(str, Enum):
    r"""Key of this object. Always `deathNotificationStatus`."""
    DEATH_NOTIFICATION_STATUS = 'deathNotificationStatus'

class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1ValueCodeableConceptCodingCode(str, Enum):
    r"""Symbol, in syntax, defined by the system:
    * `1` - Informal - death notice received via an update from a local NHS Organisation such as GP or Trust
    * `2` - Formal - death notice received from Registrar of Deaths. Only these endpoints are allowed to add a Formal death:
        - National Back Office using the Demographic Spine Application (DSA)
        - Office of National Statistics (ONS)
        - Maternity sites
    * `U` - Removed. This is a possible response, but it cannot be used on an update because Spine will reject it
    """
    ONE = '1'
    TWO = '2'
    U = 'U'

class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1ValueCodeableConceptCodingDisplay(str, Enum):
    r"""Representation defined by the system."""
    INFORMAL_DEATH_NOTICE_RECEIVED_VIA_AN_UPDATE_FROM_A_LOCAL_NHS_ORGANISATION_SUCH_AS_GP_OR_TRUST = 'Informal - death notice received via an update from a local NHS Organisation such as GP or Trust'
    FORMAL_DEATH_NOTICE_RECEIVED_FROM_REGISTRAR_OF_DEATHS = 'Formal - death notice received from Registrar of Deaths'
    REMOVED = 'Removed'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1ValueCodeableConceptCoding:
    code: UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1ValueCodeableConceptCodingCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Symbol, in syntax, defined by the system:
    * `1` - Informal - death notice received via an update from a local NHS Organisation such as GP or Trust
    * `2` - Formal - death notice received from Registrar of Deaths. Only these endpoints are allowed to add a Formal death:
        - National Back Office using the Demographic Spine Application (DSA)
        - Office of National Statistics (ONS)
        - Maternity sites
    * `U` - Removed. This is a possible response, but it cannot be used on an update because Spine will reject it
    """
    system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""URI of the coding system specification."""
    display: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1ValueCodeableConceptCodingDisplay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the coding system in use."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1ValueCodeableConcept:
    r"""Death Notification Status."""
    coding: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1ValueCodeableConceptCoding]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1:
    r"""Wrapper object for death notification status code."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `deathNotificationStatus`."""
    value_codeable_concept: UpdatePatientPartial200ApplicationFhirPlusJSONExtension4Extension1ValueCodeableConcept = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept') }})
    r"""Death Notification Status."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4URL(str, Enum):
    r"""Definition of death notification extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_DEATH_NOTIFICATION_STATUS = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-DeathNotificationStatus'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension4:
    r"""Wrapper object for death notification details."""
    extension: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension') }})
    r"""Array containing exactly one death notification status code object and exactly one effective date object."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension4URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Definition of death notification extension."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension3URL(str, Enum):
    r"""URL of specification of UKCore-MedicalApplianceSupplier FHIR extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_MEDICAL_APPLIANCE_SUPPLIER = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension3ValueReferenceIdentifier:
    r"""Wrapper object for the patient's medical appliance supplier organisation code."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Organisation code for the medical appliance supplier, as held in the [Organisation Data Service](https://developer.nhs.uk/apis/ods/)."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL for the FHIR code system for the ODS organisation code."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension3ValueReference:
    r"""Reference to medical appliance supplier pharmacy `Organization` resource."""
    identifier: UpdatePatientPartial200ApplicationFhirPlusJSONExtension3ValueReferenceIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})
    r"""Wrapper object for the patient's medical appliance supplier organisation code."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension3:
    r"""Wrapper object for the patient's medical appliance supplier. This will only be populated on a retrieval and not a search."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension3URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""URL of specification of UKCore-MedicalApplianceSupplier FHIR extension."""
    value_reference: UpdatePatientPartial200ApplicationFhirPlusJSONExtension3ValueReference = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueReference') }})
    r"""Reference to medical appliance supplier pharmacy `Organization` resource."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension2URL(str, Enum):
    r"""URL of specification of UKCore-DispensingDoctor FHIR extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_PREFERRED_DISPENSER_ORGANIZATION = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-PreferredDispenserOrganization'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension2ValueReferenceIdentifier:
    r"""Wrapper object for the patient's dispensing doctor organisation code."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Organisation code for the dispensing doctor, as held in the [Organisation Data Service](https://developer.nhs.uk/apis/ods/)."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL for the FHIR code system for the ODS organisation code."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension2ValueReference:
    r"""Reference to a GP practice pharmacy `Organization` resource."""
    identifier: UpdatePatientPartial200ApplicationFhirPlusJSONExtension2ValueReferenceIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})
    r"""Wrapper object for the patient's dispensing doctor organisation code."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension2:
    r"""Wrapper object for the patient's dispensing doctor. This will only be populated on a retrieval and not a search."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension2URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""URL of specification of UKCore-DispensingDoctor FHIR extension."""
    value_reference: UpdatePatientPartial200ApplicationFhirPlusJSONExtension2ValueReference = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueReference') }})
    r"""Reference to a GP practice pharmacy `Organization` resource."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONExtension1URL(str, Enum):
    r"""URL of specification of UKCore-NominatedPharmacy FHIR extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_NOMINATED_PHARMACY = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension1ValueReferenceIdentifier:
    r"""Wrapper object for the patient's nominated pharmacy organisation code."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Organisation code for the nominated pharmacy, as held in the [Organisation Data Service](https://developer.nhs.uk/apis/ods/)."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL for the FHIR code system for the ODS organisation code."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension1ValueReference:
    r"""Reference to a pharmacy `Organization` resource."""
    identifier: UpdatePatientPartial200ApplicationFhirPlusJSONExtension1ValueReferenceIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})
    r"""Wrapper object for the patient's nominated pharmacy organisation code."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONExtension1:
    r"""Wrapper object for the patient's nominated pharmacy. This will only be populated on a retrieval and not a search."""
    url: UpdatePatientPartial200ApplicationFhirPlusJSONExtension1URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""URL of specification of UKCore-NominatedPharmacy FHIR extension."""
    value_reference: UpdatePatientPartial200ApplicationFhirPlusJSONExtension1ValueReference = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueReference') }})
    r"""Reference to a pharmacy `Organization` resource."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONGender(str, Enum):
    r"""Classification of the gender of a patient. The classification is phenotypical rather than genotypical, i.e. it does not provide codes for medical or scientific purposes.
    It is the administrative gender that the patient wishes to be known as. In some cases, this may not be the same as the patient’s registered birth gender, or their current clinical gender.
    """
    MALE = 'male'
    FEMALE = 'female'
    OTHER = 'other'
    UNKNOWN = 'unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONGeneralPractitionerIdentifierPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONGeneralPractitionerIdentifier:
    r"""Identifier and system of identification used for this Organisation."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Organisation code for the registered general practice, as held in the [Organisation Data Service](https://developer.nhs.uk/apis/ods/)."""
    period: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONGeneralPractitionerIdentifierPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL for the Organisation Data Service - who are responsible for publishing codes that identify organisations and individuals across health and social care."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONGeneralPractitioner:
    r"""General practice (not practitioner) with which the patient is or was registered."""
    identifier: UpdatePatientPartial200ApplicationFhirPlusJSONGeneralPractitionerIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})
    r"""Identifier and system of identification used for this Organisation."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Object identifier (OID) specific to the returned details - this should be return exactly the same in any update."""
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of Reference being returned."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONIdentifierExtensionURL(str, Enum):
    r"""URL of the extension definition."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_NHS_NUMBER_VERIFICATION_STATUS = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONIdentifierExtensionValueCodeableConceptCoding:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Symbol in syntax defined by the system."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URI of the coding system specification."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the coding system in use."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONIdentifierExtensionValueCodeableConcept:
    r"""NHS Number Verification Status Indicator."""
    coding: list[UpdatePatientPartial200ApplicationFhirPlusJSONIdentifierExtensionValueCodeableConceptCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONIdentifierExtension:
    r"""Status indicating if NHS number is present and verified."""
    url: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONIdentifierExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL of the extension definition."""
    value_codeable_concept: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONIdentifierExtensionValueCodeableConcept] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept'), 'exclude': lambda f: f is None }})
    r"""NHS Number Verification Status Indicator."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONIdentifier:
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The patient's NHS number. The primary identifier of a patient, unique within NHS England and Wales. Always 10 digits and must be a [valid NHS number](https://www.datadictionary.nhs.uk/attributes/nhs_number.html)."""
    extension: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONIdentifierExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""FHIR extensions."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""System identifier belongs to."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONManagingOrganizationIdentifierPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONManagingOrganizationIdentifier:
    r"""Identifier and system of identification used for this Organisation."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Organisation code for the registered general practice, as held in the [Organisation Data Service](https://developer.nhs.uk/apis/ods/)."""
    period: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONManagingOrganizationIdentifierPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL for the Organisation Data Service - who are responsible for publishing codes that identify organisations and individuals across health and social care."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONManagingOrganization:
    r"""The managing organization of a de-registered patient. This will not be returned when the reason for de-registration is death."""
    identifier: UpdatePatientPartial200ApplicationFhirPlusJSONManagingOrganizationIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})
    r"""Identifier and system of identification used for this Organisation."""
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of Reference being returned."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONMetaSecurityCode(str, Enum):
    r"""Code defined by the system value set."""
    U = 'U'
    R = 'R'
    V = 'V'
    REDACTED = 'REDACTED'

class UpdatePatientPartial200ApplicationFhirPlusJSONMetaSecurityDisplay(str, Enum):
    r"""Representation defined by the system."""
    UNRESTRICTED = 'unrestricted'
    RESTRICTED = 'restricted'
    VERY_RESTRICTED = 'very restricted'
    REDACTED = 'redacted'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONMetaSecurity:
    code: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONMetaSecurityCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Code defined by the system value set."""
    display: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONMetaSecurityDisplay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URI of the value set specification."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONMeta:
    r"""Metadata about this resource."""
    security: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONMetaSecurity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security'), 'exclude': lambda f: f is None }})
    r"""The level of security on the patients record, which affects which fields are populated on retrieval. The possible responses are:
    * U - unrestricted. All available data is returned.
    * R - restricted. Any sensitive data around the patient's location, so `address`, `generalPractitioner` and `telecom`, are removed from the response.
    * V - very restricted. All patient data is removed from the response apart from `id`, `identifier` and `meta` fields. The `gender` field returns `unknown` regardless of actual gender.
    * REDACTED - redacted. The patient record has been marked as invalid, so the data should not be used. This code is never returned; you receive a 404, and appropriate error response, if an invalidated patient retrieval is attempted.
    """
    version_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versionId'), 'exclude': lambda f: f is None }})
    r"""The NHS Digital assigned version of the patient resource."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONNamePeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONNameUse(str, Enum):
    r"""How this name should be used.
    * usual - Known as, conventional or the one patient normally uses. A patient always has a usual name.
    * temp - An alias or temporary name. This may also be used for temporary names assigned at birth or in emergency situations.
    * nickname - A name that the patient prefers to be addressed by, but is not part of their usual name.
    * old - This name is no longer in use (or was never correct, but retained for records).
    * maiden - Name changed for Marriage. A name used prior to changing name because of marriage. This term is not gender specific. The use of this term does not imply any particular history for a person's name.
    
    The following use codes are included in the [name-use](https://www.hl7.org/fhir/valueset-name-use.html) value set, but should not be used and is not be returned as part of a retrieval.
    * official - The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called \"legal name\".
    * anonymous - Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons).
    """
    USUAL = 'usual'
    TEMP = 'temp'
    NICKNAME = 'nickname'
    OLD = 'old'
    MAIDEN = 'maiden'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONName:
    family: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('family') }})
    r"""Family name (often called Surname)."""
    use: UpdatePatientPartial200ApplicationFhirPlusJSONNameUse = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use') }})
    r"""How this name should be used.
    * usual - Known as, conventional or the one patient normally uses. A patient always has a usual name.
    * temp - An alias or temporary name. This may also be used for temporary names assigned at birth or in emergency situations.
    * nickname - A name that the patient prefers to be addressed by, but is not part of their usual name.
    * old - This name is no longer in use (or was never correct, but retained for records).
    * maiden - Name changed for Marriage. A name used prior to changing name because of marriage. This term is not gender specific. The use of this term does not imply any particular history for a person's name.
    
    The following use codes are included in the [name-use](https://www.hl7.org/fhir/valueset-name-use.html) value set, but should not be used and is not be returned as part of a retrieval.
    * official - The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called \"legal name\".
    * anonymous - Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons).
    """
    given: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('given'), 'exclude': lambda f: f is None }})
    r"""Given names, including any middle names.
    
    Each name(s) should be a separate item in the list. The first given name may include multiple names, separated by a space.
    Subsequent names must be broken down into list items. For example, the input `[Jane Marie Anne, Jo Adele]` returns `[Jane Marie Anne, Jo, Adele]`.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique object identifier for this name."""
    period: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONNamePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    prefix: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix'), 'exclude': lambda f: f is None }})
    r"""Name prefixes, titles, and prenominals."""
    suffix: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suffix'), 'exclude': lambda f: f is None }})
    r"""Name suffices and postnominals."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONTelecomExtensionURL(str, Enum):
    r"""Definition of other contact system extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_OTHER_CONTACT_SYSTEM = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-OtherContactSystem'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONTelecomExtensionValueCoding:
    r"""URL of specification of other contact systems."""
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Coded value for the other contact system in place."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the other contact system code."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL of Code System that describes available contact relationships."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONTelecomExtension:
    r"""Wrapped object for other contact system details."""
    url: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONTelecomExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Definition of other contact system extension."""
    value_coding: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONTelecomExtensionValueCoding] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCoding'), 'exclude': lambda f: f is None }})
    r"""URL of specification of other contact systems."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONTelecomPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    


class UpdatePatientPartial200ApplicationFhirPlusJSONTelecomSystem(str, Enum):
    r"""Means of communication, such as phone or email."""
    PHONE = 'phone'
    FAX = 'fax'
    EMAIL = 'email'
    OTHER = 'other'

class UpdatePatientPartial200ApplicationFhirPlusJSONTelecomUse(str, Enum):
    r"""Location associated with communication system."""
    HOME = 'home'
    WORK = 'work'
    TEMP = 'temp'
    MOBILE = 'mobile'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSONTelecom:
    r"""A contact point, such as a phone number or email address"""
    system: UpdatePatientPartial200ApplicationFhirPlusJSONTelecomSystem = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""Means of communication, such as phone or email."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Phone number, email address, or other identifier for use with contact system."""
    extension: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONTelecomExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Extension that is returned when the communication type is `textphone`. The only code returned is `textphone`, which means `Minicom (Textphone)`.
    
    The `system` is `other` when the extension is included.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique object identifier for this contact point."""
    period: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONTelecomPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    use: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONTelecomUse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use'), 'exclude': lambda f: f is None }})
    r"""Location associated with communication system."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UpdatePatientPartial200ApplicationFhirPlusJSON:
    r"""Patient updated."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The patient's NHS number. The primary identifier of a patient, unique within NHS England and Wales. Always 10 digits and must be a [valid NHS number](https://www.datadictionary.nhs.uk/attributes/nhs_number.html)."""
    address: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""List of addresses associated with the patient.
    
    These are fully populated on a retrieval or a successful update, only the `home` address is returned on a search.
    When a patient tagged as `restricted` or `very restricted` is retrieved, all addresses are removed from the response.
    """
    birth_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birthDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the patient was born or is officially deemed to have been born.
    
    It is a date in the format `yyyy-mm-dd`. Due to data quality issues on a small number of patients `yyyy-mm` and `yyyy` format may also be returned.
    
    When a patient tagged as `very restricted` is retrieved, birth date is removed from the response.
    """
    contact: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONSchemaForAPatientContact]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact'), 'exclude': lambda f: f is None }})
    r"""A list of patient contacts. Only emergency contacts are returned and only emergency contacts should be added. Any other contacts should be added to the patients `Related Person`.
    Patients designate here any contact number they desire to be used in case of an emergency.
    Note, while a patient may also desire to record various related persons telecom details, these do not separately allow for a concept of emergency contact; only ranking. See RelatedPerson endpoint.
    When a patient tagged as `restricted` or `very restricted` is retrieved, all contacts are removed from the response.
    """
    deceased_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deceasedDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time on which a person died or is officially deemed to have died, if applicable and known.
    
    It is a datetime in the format `yyyy-mm-ddTHH:MM:SS+HH:MM` or `yyyy-mm-dd`. Due to data quality issues on a small number of patients `yyyy-mm` and `yyyy` format may also be returned.
    
    When a patient tagged as `very restricted` is retrieved, death date is removed from the response.
    """
    extension: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Wrapper array for the patient's pharmacies, death notification status, communication details, contact preferences and place of birth; these are all FHIR extensions.
    Always contains zero or one of each pharmacy object, zero or one death notification status object, zero or one communication details object, zero or one contact preference and zero or one place of birth object.
    When a patient tagged as `restricted` or `very restricted` is retrieved, the pharmacy and birth place extensions are removed from the response.
    """
    gender: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONGender] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender'), 'exclude': lambda f: f is None }})
    r"""Classification of the gender of a patient. The classification is phenotypical rather than genotypical, i.e. it does not provide codes for medical or scientific purposes.
    It is the administrative gender that the patient wishes to be known as. In some cases, this may not be the same as the patient’s registered birth gender, or their current clinical gender.
    """
    general_practitioner: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONGeneralPractitioner]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generalPractitioner'), 'exclude': lambda f: f is None }})
    r"""General Practice (not practitioner) with which the patient is, or was, registered. Always contains zero or one general practitioner object.
    When a patient tagged as `restricted` or `very restricted` is retrieved, the General Practice is removed from the response.
    """
    identifier: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier'), 'exclude': lambda f: f is None }})
    r"""Identifier and system of identification used for this Patient."""
    managing_organization: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONManagingOrganization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managingOrganization'), 'exclude': lambda f: f is None }})
    r"""The managing organization of a de-registered patient. This will not be returned when the reason for de-registration is death."""
    meta: Optional[UpdatePatientPartial200ApplicationFhirPlusJSONMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""Metadata about this resource."""
    multiple_birth_integer: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipleBirthInteger'), 'exclude': lambda f: f is None }})
    r"""The order in which the patient was born, with 1 indicating the first or only birth in the sequence, 2 indicating the second birth in the sequence, 3 indicating the third, and so on up to 7.
    
    There are two other valid values; `8` meaning `Not applicable` and `9` meaning `Not known`.
    """
    name: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONName]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""List of names associated with the patient.
    
    When a patient tagged as `very restricted` is retrieved, all names are removed from the response.
    """
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""FHIR resource type."""
    telecom: Optional[list[UpdatePatientPartial200ApplicationFhirPlusJSONTelecom]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telecom'), 'exclude': lambda f: f is None }})
    r"""List of contact points for the patient; for example, phone numbers or email addresses.
    When a patient tagged as `restricted` or `very restricted` is retrieved, all contact points are removed from the response.
    """
    




@dataclasses.dataclass
class UpdatePatientPartialResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    update_patient_partial_200_application_fhir_plus_json_object: Optional[UpdatePatientPartial200ApplicationFhirPlusJSON] = dataclasses.field(default=None)
    r"""Patient updated."""
    update_patient_partial_4_xx_application_fhir_plus_json_object: Optional[UpdatePatientPartial4XXApplicationFhirPlusJSON] = dataclasses.field(default=None)
    r"""An error occurred as follows:
    
    | HTTP status | Error code                 | Description |
    | ----------- | -------------------------- | --------------------------------------------- |
    | 400         | UNSUPPORTED_SERVICE        | Missing NHS number. |
    | 400         | MISSING_VALUE              | Missing header parameter. For details, see the `diagnostics` field. |
    | 400         | INVALID_VALUE              | Invalid header parameter or invalid value in body of patch request. For details, see the `diagnostics` field. |
    | 400         | INVALID_UPDATE             | Malformed patch request or client error after the patch was accepted and patient was not updated. For example, a start date was after the corresponding end date. |
    | 400         | INVALID_RESOURCE_ID        | Invalid NHS number. |
    | 400         | VALIDATION_ERROR           | This is the \"default\" error thrown when no others are applicable. |
    | 400         | UNSUPPORTED_CHARACTERS_IN_FIELD | Invalid value in body of patch request. For details, see the `diagnostics` field. |
    | 400         | ADDITIONAL_PROPERTIES      | The user sent additional properties within the dictionary. For example sending a patient patch and attempting to add 'pets', which is not an allowed field within the patient resource. |
    | 400         | UNSUPPORTED_VALUE          | There was an unsupported value in the request. The value may be valid in the schema - however it could be a legacy value that we do not allow to be set anymore. For example - setting the death notification status to 'removed'. The invalid value and field will be presented in the display. |
    | 400         | TOO_FEW_VALUES_SUBMITTED   | The field in question has a minimum number of items and the user sent too few. |
    | 400         | TOO_MANY_VALUES_SUBMITTED  | The field in question has a maximum number of items and the user sent too many. |
    | 401         | ACCESS_DENIED              | Access token missing, invalid or expired, or calling application not configured for this operation. |
    | 403         | FORBIDDEN_UPDATE           | The user is not permitted to update certain resources or elements, for example most users are not allowed to update the date of death once it has been set. A detailed description will be added to the display. For example - updating a sensitive patient or adding a formal death notification is only permitted from certain systems. |
    | 403         | ACCESS_DENIED              | Patient cannot perform this action. |
    | 404         | RESOURCE_NOT_FOUND         | Patient does not exist for given NHS number. |
    | 404         | INVALIDATED_RESOURCE       | Patient record for given NHS number has been invalidated and not superseded by another NHS number. |
    | 408         | UNABLE_TO_CALL_SERVICE     | The downstream domain processing has not completed within the configured timeout period. |
    | 409         | RESOURCE_VERSION_MISMATCH  | The resource version in the `If-Match` header of the update request did not match the current version of the resource. See [Patient resource versioning](https://digital.nhs.uk/developer/api-catalogue/personal-demographics-service-fhir#patient-resource-versioning). |
    | 412         | PRECONDITION_FAILED        | Problem with request, for example missing `If-Match` header. For details, see the `diagnostics` field. |
    | 429         | TOO_MANY_REQUESTS          | You have exceeded your application's [rate limit](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#rate-limits). |
    """
    update_patient_partial_503_application_fhir_plus_json_object: Optional[UpdatePatientPartial503ApplicationFhirPlusJSON] = dataclasses.field(default=None)
    r"""The request timed out during processing. This does not imply the request has failed or been rejected. Error code: `SERVICE_UNAVAILABLE`.
    
    Re-send the request after the time specified in the `Retry-After` header using the same `X-Request-ID` value.
    """
    

