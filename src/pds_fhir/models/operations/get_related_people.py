"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from pds_fhir import utils
from typing import Any, Optional



@dataclasses.dataclass
class GetRelatedPeopleRequest:
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The patient's NHS number. The primary identifier of a patient, unique within NHS England and Wales. Always 10 digits and must be a [valid NHS number](https://www.datadictionary.nhs.uk/attributes/nhs_number.html)."""
    nhsd_end_user_organisation_ods: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'NHSD-End-User-Organisation-ODS', 'style': 'simple', 'explode': False }})
    r"""The ODS code of an End User Organisation (EUO). Currently optional but will be updated to be mandatory for client applications which service multiple End User organisations, in order to correctly attribute calls to each EUO. Date of change to a mandatory field to be defined."""
    nhsd_session_urid: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'NHSD-Session-URID', 'style': 'simple', 'explode': False }})
    r"""The user role ID (URID) for the current session. Also known as a user role profile ID (URPID).
    
    This header is optional.
    
    In Application-restricted access mode this header is ignored.
    
    In Healthcare worker access mode if you send this header it must be valid for the logged-in user. See [determine the user's role](https://digital.nhs.uk/developer/guides-and-documentation/security-and-authorisation/user-restricted-restful-apis-nhs-cis2-separate-authentication-and-authorisation#step-9-determine-the-user-s-role) for guidance.
    """
    x_correlation_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Correlation-ID', 'style': 'simple', 'explode': False }})
    r"""An optional ID which you can use to track transactions across multiple systems. It can take any value, but we recommend avoiding `.` characters.
    
    Mirrored back in a response header.
    """
    x_request_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Request-ID', 'style': 'simple', 'explode': False }})
    r"""A globally unique identifier (GUID) for the request, which we use to de-duplicate repeated requests and to trace the request if you contact our helpdesk.
    
    Must be a universally unique identifier (UUID) (ideally version 4).
    
    Mirrored back in a response header.
    
    If you re-send a failed request, use the same value in this header.
    """
    


class GetRelatedPeople4XXApplicationFhirPlusJSONIssueCode(str, Enum):
    r"""FHIR error code."""
    INVALID = 'invalid'
    STRUCTURE = 'structure'
    REQUIRED = 'required'
    VALUE = 'value'
    INVARIANT = 'invariant'
    SECURITY = 'security'
    LOGIN = 'login'
    UNKNOWN = 'unknown'
    EXPIRED = 'expired'
    FORBIDDEN = 'forbidden'
    SUPPRESSED = 'suppressed'
    PROCESSING = 'processing'
    NOT_SUPPORTED = 'not-supported'
    DUPLICATE = 'duplicate'
    MULTIPLE_MATCHES = 'multiple-matches'
    NOT_FOUND = 'not-found'
    DELETED = 'deleted'
    TOO_LONG = 'too-long'
    CODE_INVALID = 'code-invalid'
    EXTENSION = 'extension'
    TOO_COSTLY = 'too-costly'
    BUSINESS_RULE = 'business-rule'
    CONFLICT = 'conflict'
    TRANSIENT = 'transient'
    LOCK_ERROR = 'lock-error'
    NO_STORE = 'no-store'
    EXCEPTION = 'exception'
    TIMEOUT = 'timeout'
    INCOMPLETE = 'incomplete'
    THROTTLED = 'throttled'
    INFORMATIONAL = 'informational'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople4XXApplicationFhirPlusJSONIssueDetailsCoding:
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Symbol in syntax defined by the system."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Representation defined by the system."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URI of the coding system specification."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the coding system in use."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople4XXApplicationFhirPlusJSONIssueDetails:
    r"""Internal error code."""
    coding: Optional[list[GetRelatedPeople4XXApplicationFhirPlusJSONIssueDetailsCoding]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding'), 'exclude': lambda f: f is None }})
    


class GetRelatedPeople4XXApplicationFhirPlusJSONIssueSeverity(str, Enum):
    r"""Severity of the error."""
    FATAL = 'fatal'
    ERROR = 'error'
    WARNING = 'warning'
    INFORMATION = 'information'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople4XXApplicationFhirPlusJSONIssue:
    code: GetRelatedPeople4XXApplicationFhirPlusJSONIssueCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""FHIR error code."""
    severity: GetRelatedPeople4XXApplicationFhirPlusJSONIssueSeverity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity') }})
    r"""Severity of the error."""
    details: Optional[GetRelatedPeople4XXApplicationFhirPlusJSONIssueDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Internal error code."""
    diagnostics: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnostics'), 'exclude': lambda f: f is None }})
    r"""Additional diagnostic information about the issue. This information is subject to change."""
    expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expression'), 'exclude': lambda f: f is None }})
    r"""FHIRPath of element(s) related to the error."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople4XXApplicationFhirPlusJSON:
    r"""Outcome of an operation that does not result in a resource or bundle being returned, for example an error or an async/batch submission.
    There are a number of possible error codes that can be returned along with a more detailed description in the `display` field.
    """
    issue: Optional[list[GetRelatedPeople4XXApplicationFhirPlusJSONIssue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue'), 'exclude': lambda f: f is None }})
    r"""List of issues that have occurred."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""FHIR Resource Type."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressExtensionExtension2:
    r"""Value of the address key."""
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Always 'value'."""
    value_string: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueString') }})
    r"""Address key in PAF format. An 8 digit number including leading zeroes, formatted as a string."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressExtensionExtension1ValueCoding:
    r"""URL of specification of address key format."""
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Address Key system. Always 'PAF'."""
    system: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""URL of Code System that describes available Address Key formats."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressExtensionExtension1:
    r"""Coding system of the address key."""
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Always 'type'."""
    value_coding: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressExtensionExtension1ValueCoding = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCoding') }})
    r"""URL of specification of address key format."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressExtensionURL(str, Enum):
    r"""URL of specification of the AddressKey extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_ADDRESS_KEY = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-AddressKey'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressExtension:
    r"""Unique identifier for an address."""
    extension: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Specification of address key system and address key value. Contains exactly two items: one describing the code system the Address Key uses, and the other specifying the value of the Address Key."""
    url: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL of specification of the AddressKey extension."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressText(str, Enum):
    r"""Where a `temp` address is provided a descriptor text must be sent.
    The list of possible values are:
    * `Second Home` - a patient's second home
    * `Student Accommodation` - a patient's place of residence while at university
    * `Respite Care Address` - where the patient resides during respite care
    * `Temporary Residence Address` - where the patient resides for a specific period of time
    * `Convalescence Home` - the address for a patient during a period of recovery
    * `Mobile Home` - the address of a patient's mobile home, parked for a specific period of time, e.g. the address of a caravan park
    * `Holiday Home` - the address for a patient during a holiday
    
    A patient can also register temporarily at a GP practice using a temporary address. Temporary GP registration information does not appear on the PDS, but the address used for it may.
    """
    SECOND_HOME = 'Second Home'
    STUDENT_ACCOMMODATION = 'Student Accommodation'
    RESPITE_CARE_ADDRESS = 'Respite Care Address'
    TEMPORARY_RESIDENCE_ADDRESS = 'Temporary Residence Address'
    CONVALESCENCE_HOME = 'Convalescence Home'
    MOBILE_HOME = 'Mobile Home'
    HOLIDAY_HOME = 'Holiday Home'

class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressUse(str, Enum):
    r"""Purpose of this address:
      * `home` - the home address is the patient's normal residence. Home address is also known as usual, main, registered, current or permanent address
      * `temp` - a temporary address is an address used for a set period of time, but where the patient's home, permanent address remains unchanged
      * `billing` - an address used for correspondence purposes only
      * `work` - an office address. This can be returned due to legacy data but cannot be added or replaced on update
    
      A patient should have no more than one current `temp` and/or `billing` address.
      However, historically this was constrained only by the integration requirements and was not enforced so theoretically more than one can exist for a patient when retrieving.
      Where multiple instances already exist for the patient it is not expected that local systems should manage those, but should choose the most appropriate one to maintain (e.g. by examining period dates).
    
      A `home` address is the patient's main residential address and should normally be used for all clinical and demographic purposes, including clinical and appointment correspondence.
      However additionally, `temp` and `billing` addresses may be provided by a patient when there is a requirement to record an alternative location for the purposes of unbroken care.
      When sending correspondence to a patient:
      *	a present and valid `billing` address may take precedence over `home` and `temp` addresses. A patient should have only a single current `billing` address. An address is considered 'valid' according to its period start and end dates.
      *	if no current `billing` address is provided, a `temp` address may take precedence over the `home` address, again if it is valid according to its period start and end dates.
      * if there is no valid, current `billing` and/or `temp` address, the `home` address must be used.
    """
    HOME = 'home'
    WORK = 'work'
    TEMP = 'temp'
    BILLING = 'billing'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddress:
    r"""An address associated with the patient."""
    use: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressUse = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use') }})
    r"""Purpose of this address:
      * `home` - the home address is the patient's normal residence. Home address is also known as usual, main, registered, current or permanent address
      * `temp` - a temporary address is an address used for a set period of time, but where the patient's home, permanent address remains unchanged
      * `billing` - an address used for correspondence purposes only
      * `work` - an office address. This can be returned due to legacy data but cannot be added or replaced on update
    
      A patient should have no more than one current `temp` and/or `billing` address.
      However, historically this was constrained only by the integration requirements and was not enforced so theoretically more than one can exist for a patient when retrieving.
      Where multiple instances already exist for the patient it is not expected that local systems should manage those, but should choose the most appropriate one to maintain (e.g. by examining period dates).
    
      A `home` address is the patient's main residential address and should normally be used for all clinical and demographic purposes, including clinical and appointment correspondence.
      However additionally, `temp` and `billing` addresses may be provided by a patient when there is a requirement to record an alternative location for the purposes of unbroken care.
      When sending correspondence to a patient:
      *	a present and valid `billing` address may take precedence over `home` and `temp` addresses. A patient should have only a single current `billing` address. An address is considered 'valid' according to its period start and end dates.
      *	if no current `billing` address is provided, a `temp` address may take precedence over the `home` address, again if it is valid according to its period start and end dates.
      * if there is no valid, current `billing` and/or `temp` address, the `home` address must be used.
    """
    extension: Optional[list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Postal Address File (PAF) key associated with this address formatted as a FHIR extension. Empty if no PAF key for the address is known, or an object specifying the code system of the address key and the value of the address key."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique system identifier for this address."""
    line: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line'), 'exclude': lambda f: f is None }})
    r"""All lines of the address except the postal code.
    
    Systems must apply the following formatting convention when adding or replacing addresses lines:
    *	line 1 - premises ID and/or house name, e.g. `Flat 1` or `The Old Schoolhouse`
    *	line 2 - house number, dependent thoroughfare name and descriptor (if present), thoroughfare name and descriptor, e.g. `23 Mill Lane`
    *	line 3 - dependent locality/village, locality (if present), e.g. `Boxgrove`
    *	line 4 - post town, e.g. `Leeds`
    *	line 5 - county (if present), e.g. `West Yorkshire`
    
    If any of the lines are blank, they are not returned due to FHIR conformance constraints.
    """
    period: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code of the address."""
    text: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddressText] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Where a `temp` address is provided a descriptor text must be sent.
    The list of possible values are:
    * `Second Home` - a patient's second home
    * `Student Accommodation` - a patient's place of residence while at university
    * `Respite Care Address` - where the patient resides during respite care
    * `Temporary Residence Address` - where the patient resides for a specific period of time
    * `Convalescence Home` - the address for a patient during a period of recovery
    * `Mobile Home` - the address of a patient's mobile home, parked for a specific period of time, e.g. the address of a caravan park
    * `Holiday Home` - the address for a patient during a holiday
    
    A patient can also register temporarily at a GP practice using a temporary address. Temporary GP registration information does not appear on the PDS, but the address used for it may.
    """
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension2URL(str, Enum):
    r"""Key of this object. Always `interpreterRequired`."""
    INTERPRETER_REQUIRED = 'interpreterRequired'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension2:
    r"""Wrapper object for whether an interpreter is required."""
    url: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension2URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `interpreterRequired`."""
    value_boolean: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueBoolean') }})
    r"""Whether an interpreter is required."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension1URL(str, Enum):
    r"""Key of this object. Always `language`."""
    LANGUAGE = 'language'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension1ValueCodeableConceptCoding:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Language code based on [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) standard plus extensions for braille, makaton and sign languages, which are:
    * `q1` - Braille
    * `q2` - American Sign Language
    * `q3` - Australian Sign Language
    * `q4` - British Sign Language
    * `q5` - Makaton
    All valid codes combined can be found at https://fhir.hl7.org.uk/CodeSystem/UKCore-HumanLanguage.
    """
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the language code (such as English). If there is a language code with no defined mapping, `Unknown` will be returned."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL of the Language Code System. Always uses the 'UKCore-HumanLanguage' Code System."""
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Version of the language code system."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension1ValueCodeableConcept:
    r"""Human language."""
    coding: list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension1ValueCodeableConceptCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    r"""Exactly one language code."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension1:
    r"""Wrapper object for communication language."""
    url: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension1URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `language`."""
    value_codeable_concept: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4Extension1ValueCodeableConcept = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept') }})
    r"""Human language."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4URL(str, Enum):
    r"""Definition of communication extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_NHS_COMMUNICATION = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NHSCommunication'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4:
    r"""Wrapper object for communication details. This will only be populated on a retrieval and not a search."""
    extension: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension') }})
    r"""Definition of communication extension, The array must have two items, a valueCodeableConcept for the language and a valueBoolean for if an interpreter is required."""
    url: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension4URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Definition of communication extension."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension3URL(str, Enum):
    r"""Key of this object. Always `PreferredContactTimes`."""
    PREFERRED_CONTACT_TIMES = 'PreferredContactTimes'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension3:
    r"""Wrapper object for preferred contact times."""
    url: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension3URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `PreferredContactTimes`."""
    value_string: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueString') }})
    r"""A free-text description about the preferred contact times."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension2URL(str, Enum):
    r"""Key of this object. Always `PreferredContactMethod`."""
    PREFERRED_CONTACT_METHOD = 'PreferredContactMethod'

class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension2ValueCodeableConceptCodingSystem(str, Enum):
    r"""Definition of the preferred contact method extension."""
    HTTPS_FHIR_HL7_ORG_UK_CODE_SYSTEM_UK_CORE_PREFERRED_CONTACT_METHOD = 'https://fhir.hl7.org.uk/CodeSystem/UKCore-PreferredContactMethod'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension2ValueCodeableConceptCoding:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""A code to identify to identify the preferred contact method of a patient, contact or related person.
    * 1	- Letter
    * 2	- Visit
    * 3	- Telephone
    * 4	- E-mail
    * 5	- Minicom (Textphone)
    * 6	- Telephone contact via proxy
    * 7	- Sign language
    * 8	- No Telephone contact
    """
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the preferred contact method code."""
    system: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension2ValueCodeableConceptCodingSystem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""Definition of the preferred contact method extension."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension2ValueCodeableConcept:
    r"""Preferred Contact Method."""
    coding: list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension2ValueCodeableConceptCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension2:
    r"""Wrapper object for preferred contact method."""
    url: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension2URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `PreferredContactMethod`."""
    value_codeable_concept: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension2ValueCodeableConcept = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept') }})
    r"""Preferred Contact Method."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension1ValueCodeableConceptCodingSystem(str, Enum):
    r"""Definition of the preferred written communication extension."""
    HTTPS_FHIR_HL7_ORG_UK_CODE_SYSTEM_UK_CORE_PREFERRED_WRITTEN_COMMUNICATION_FORMAT = 'https://fhir.hl7.org.uk/CodeSystem/UKCore-PreferredWrittenCommunicationFormat'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension1ValueCodeableConceptCoding:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""A code to identify the preferred written communication format of a patient, contact or related person.
    * 11 - Large print
    * 12 - Braille
    * 13 - Audio tape
    """
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the preferred written communication format code."""
    system: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension1ValueCodeableConceptCodingSystem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""Definition of the preferred written communication extension."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension1ValueCodeableConcept:
    r"""Preferred Written Communication Format."""
    coding: list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension1ValueCodeableConceptCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension1:
    r"""Wrapper object for preferred written communication format."""
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Key of this object. Always `PreferredWrittenCommunicationFormat`."""
    value_codeable_concept: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3Extension1ValueCodeableConcept = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCodeableConcept') }})
    r"""Preferred Written Communication Format."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3URL(str, Enum):
    r"""Definition of the contact preference extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_CONTACT_PREFERENCE = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-ContactPreference'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3:
    r"""Wrapper object for preferred contact details; the written communication format, preferred contact time and method. This will only be populated on a retrieval and not a search."""
    extension: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension') }})
    r"""Wrapper array containing zero or one preferred contact method, zero or one preferred written communication format; and zero or one preferred contact time."""
    url: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension3URL = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Definition of the contact preference extension."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension2URL(str, Enum):
    r"""URL to FHIR Extension Specification."""
    HTTPS_FHIR_NHS_UK_R4_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_CONTACT_RANK = 'https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactRank'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension2:
    r"""Rank indicating order in which contacts should be tried."""
    url: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension2URL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL to FHIR Extension Specification."""
    value_positive_int: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valuePositiveInt'), 'exclude': lambda f: f is None }})
    r"""Rank expressed as positive integer (1 being the highest)."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension1URL(str, Enum):
    r"""URL to FHIR Extension Specification."""
    HTTPS_FHIR_NHS_UK_R4_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_COPY_CORRESPONDENCE_INDICATOR = 'https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-CopyCorrespondenceIndicator'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension1:
    r"""Flag indicating if this person should be copied in on any contact with the Patient. This will only be returned if the value is true and the person should be copied in on correspondence, otherwise it will be omitted."""
    url: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceExtension1URL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL to FHIR Extension Specification."""
    value_boolean: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueBoolean'), 'exclude': lambda f: f is None }})
    r"""Flag indicating if this person should be copied in on correspondence. This will only be returned if the value is `true` otherwise it will not be returned and can be assumed `false`"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceNamePeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceNameUse(str, Enum):
    r"""How this name should be used.
    * usual - Known as, conventional or the one patient normally uses. A patient always has a usual name.
    * temp - An alias or temporary name. This may also be used for temporary names assigned at birth or in emergency situations.
    * nickname - A name that the patient prefers to be addressed by, but is not part of their usual name.
    * old - This name is no longer in use (or was never correct, but retained for records).
    * maiden - Name changed for Marriage. A name used prior to changing name because of marriage. This term is not gender specific. The use of this term does not imply any particular history for a person's name.
    
    The following use codes are included in the [name-use](https://www.hl7.org/fhir/valueset-name-use.html) value set, but should not be used and is not be returned as part of a retrieval.
    * official - The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called \"legal name\".
    * anonymous - Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons).
    """
    USUAL = 'usual'
    TEMP = 'temp'
    NICKNAME = 'nickname'
    OLD = 'old'
    MAIDEN = 'maiden'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceName:
    family: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('family') }})
    r"""Family name (often called Surname)."""
    use: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceNameUse = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use') }})
    r"""How this name should be used.
    * usual - Known as, conventional or the one patient normally uses. A patient always has a usual name.
    * temp - An alias or temporary name. This may also be used for temporary names assigned at birth or in emergency situations.
    * nickname - A name that the patient prefers to be addressed by, but is not part of their usual name.
    * old - This name is no longer in use (or was never correct, but retained for records).
    * maiden - Name changed for Marriage. A name used prior to changing name because of marriage. This term is not gender specific. The use of this term does not imply any particular history for a person's name.
    
    The following use codes are included in the [name-use](https://www.hl7.org/fhir/valueset-name-use.html) value set, but should not be used and is not be returned as part of a retrieval.
    * official - The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called \"legal name\".
    * anonymous - Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons).
    """
    given: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('given'), 'exclude': lambda f: f is None }})
    r"""Given names, including any middle names.
    
    Each name(s) should be a separate item in the list. The first given name may include multiple names, separated by a space.
    Subsequent names must be broken down into list items. For example, the input `[Jane Marie Anne, Jo Adele]` returns `[Jane Marie Anne, Jo, Adele]`.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique object identifier for this name."""
    period: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceNamePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    prefix: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix'), 'exclude': lambda f: f is None }})
    r"""Name prefixes, titles, and prenominals."""
    suffix: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suffix'), 'exclude': lambda f: f is None }})
    r"""Name suffices and postnominals."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourcePatientIdentifier:
    r"""Identifier and system of identification used for this Patient.
    
    This is an optional field as related person details are either a reference to another NHS number, or the details, such as name and adress, stored directly on the resource.
    """
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL for the Patient retrieval API."""
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""NHS number for the related person"""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourcePatientType(str, Enum):
    PATIENT = 'Patient'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourcePatient:
    type: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourcePatientType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    identifier: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourcePatientIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier'), 'exclude': lambda f: f is None }})
    r"""Identifier and system of identification used for this Patient.
    
    This is an optional field as related person details are either a reference to another NHS number, or the details, such as name and adress, stored directly on the resource.
    """
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""URL for the FHIR Patient resource."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourcePeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceRelationshipCodingSystem(str, Enum):
    r"""URI of the coding system specification."""
    HTTP_HL7_ORG_FHIR_VALUE_SET_RELATEDPERSON_RELATIONSHIPTYPE = 'http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype'
    HTTPS_FHIR_NHS_UK_R4_CODE_SYSTEM_UK_CORE_ADDITIONAL_RELATED_PERSON_ROLE = 'https://fhir.nhs.uk/R4/CodeSystem/UKCore-AdditionalRelatedPersonRole'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceRelationshipCoding:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Symbol in syntax defined by the system."""
    system: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceRelationshipCodingSystem = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""URI of the coding system specification."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Human-friendly display representation defined by the system."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceRelationship:
    coding: list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceRelationshipCoding] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coding') }})
    r"""Coded values for three relationship types:
    * Role
    * Type
    * Next-of-Kin
    
    The codes used can be found at:
    * http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype
    * https://fhir.nhs.uk/R4/CodeSystem/UKCore-AdditionalRelatedPersonRole
    
    The allowed values for `Role` are:
    * Agent - Agent of patient
    * Guardian - Guardian of patient
    * Personal - Personal relationship with the patient
    
    The allowed values for `Type` are:
    * SPS - spouse
    * DOMPART - domestic partner
    * PRN - parent
    * PRNFOST - foster parent
    * STPPRN - step parent
    * CHILD - child
    * MTH - mother
    * FTH - father
    * SIS - sister
    * BRO - brother
    * FAMMEMB - family member
    * ONESELF - self
    * N - Next-of-Kin
    * U - Unknown
    * PolygamousPartner - Polygamous Partner of patient
    * Dependant - Dependant of patient
    * NonDependant - Non Dependant of patient
    * ProxyContact - Proxy Contact for patient
    * ProxyCommunication - Proxy Communication for patient
    * ProxyContactCommunication - Proxy Contact and Communication for patient
    * Carer - Carer of patient
    * Guardian - Guardian of patient
    * NotSpecified - Not Specified
    
    The allowed values for `Next-of-Kin` are:
    * N - Next-of-Kin
    
    `Role` and `Type` are mandatory, so both should be present - however they both contain the `Guardian` code - so a single response is possible.
    
    `Next-of-Kin` is optional and will be absent from the response when the related person is not the Next-of-Kin.
    """
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomExtensionURL(str, Enum):
    r"""Definition of other contact system extension."""
    HTTPS_FHIR_HL7_ORG_UK_STRUCTURE_DEFINITION_EXTENSION_UK_CORE_OTHER_CONTACT_SYSTEM = 'https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-OtherContactSystem'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomExtensionValueCoding:
    r"""URL of specification of other contact systems."""
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Coded value for the other contact system in place."""
    display: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display'), 'exclude': lambda f: f is None }})
    r"""Display-friendly representation of the other contact system code."""
    system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system'), 'exclude': lambda f: f is None }})
    r"""URL of Code System that describes available contact relationships."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomExtension:
    r"""Wrapped object for other contact system details."""
    url: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomExtensionURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Definition of other contact system extension."""
    value_coding: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomExtensionValueCoding] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCoding'), 'exclude': lambda f: f is None }})
    r"""URL of specification of other contact systems."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomPeriod:
    r"""Business effective period when name was, is, or will be in use."""
    start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""Start date of time period, if known, in format `yyyy-mm-dd`. Can be a future date."""
    end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period, if known and if not ongoing, in format `yyyy-mm-dd`. Can be a future date."""
    


class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomSystem(str, Enum):
    r"""Means of communication, such as phone or email."""
    PHONE = 'phone'
    FAX = 'fax'
    EMAIL = 'email'
    OTHER = 'other'

class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomUse(str, Enum):
    r"""Location associated with communication system."""
    HOME = 'home'
    WORK = 'work'
    TEMP = 'temp'
    MOBILE = 'mobile'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecom:
    r"""A contact point, such as a phone number or email address"""
    system: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomSystem = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('system') }})
    r"""Means of communication, such as phone or email."""
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""Phone number, email address, or other identifier for use with contact system."""
    extension: Optional[list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Extension that is returned when the communication type is `textphone`. The only code returned is `textphone`, which means `Minicom (Textphone)`.
    
    The `system` is `other` when the extension is included.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique object identifier for this contact point."""
    period: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    use: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecomUse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use'), 'exclude': lambda f: f is None }})
    r"""Location associated with communication system."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntryResource:
    patient: GetRelatedPeople200ApplicationFhirPlusJSONEntryResourcePatient = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})
    relationship: list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceRelationship] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationship') }})
    r"""The relationship of the related person to the patient."""
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    address: Optional[list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""List containing zero or one address associated with the related person.
    This is an optional field as there may be a `patient` reference which can be used to retrieve any details about the related person.
    If no `patient` reference is available `name` and `address` must be provided at the minimum.
    """
    extension: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""Wrapper array for copy correspondence, contact rank, contact preferences and communication details; these are all FHIR extensions. Always contains zero or one of each extension type."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique object identifier for this name."""
    name: Optional[list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceName]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""List containing zero or one name associated with the related person.
    This is an optional field as there may be a `patient` reference which can be used to retrieve any details about the related person.
    If no `patient` reference is available `name` and `address` must be provided at the minimum.
    """
    period: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourcePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Business effective period when name was, is, or will be in use."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""FHIR resource type."""
    telecom: Optional[list[GetRelatedPeople200ApplicationFhirPlusJSONEntryResourceTelecom]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telecom'), 'exclude': lambda f: f is None }})
    r"""List containing zero to five contact methods associated with the related person.
    This is an optional field as there may be a `patient` reference which can be used to retrieve any details about the related person.
    """
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSONEntry:
    full_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullUrl'), 'exclude': lambda f: f is None }})
    r"""Absolute URL of the resource described in this item."""
    resource: Optional[GetRelatedPeople200ApplicationFhirPlusJSONEntryResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetRelatedPeople200ApplicationFhirPlusJSON:
    r"""Information successfully returned."""
    entry: Optional[list[GetRelatedPeople200ApplicationFhirPlusJSONEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entry'), 'exclude': lambda f: f is None }})
    r"""A list of related people details attached to the patient."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""FHIR Resource Type."""
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""Time the search was performed."""
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Number of resources returned in search."""
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""FHIR Bundle Type."""
    




@dataclasses.dataclass
class GetRelatedPeopleResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    get_related_people_200_application_fhir_plus_json_object: Optional[GetRelatedPeople200ApplicationFhirPlusJSON] = dataclasses.field(default=None)
    r"""Information successfully returned."""
    get_related_people_4_xx_application_fhir_plus_json_object: Optional[GetRelatedPeople4XXApplicationFhirPlusJSON] = dataclasses.field(default=None)
    r"""An error occurred as follows:
    
    | HTTP status | Error code                 | Description |
    | ----------- | -------------------------- | --------------------------------------------- |
    | 400         | INVALID_RESOURCE_ID        | Invalid NHS number. |
    | 400         | MISSING_VALUE              | Missing header parameter. For details, see the `diagnostics` field. |
    | 400         | INVALID_VALUE              | Invalid header parameter. For details, see the `diagnostics` field. |
    | 401         | ACCESS_DENIED              | Access token missing, invalid or expired, or calling application not configured for this operation. |
    | 404         | RESOURCE_NOT_FOUND         | No related people exist for given NHS number. |
    | 404         | INVALIDATED_RESOURCE       | Patient record for given NHS number has been invalidated and not superseded by another NHS number. |
    | 408         | UNABLE_TO_CALL_SERVICE     | The downstream domain processing has not completed within the configured timeout period. |
    | 429         | TOO_MANY_REQUESTS          | You have exceeded your application's [rate limit](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#rate-limits). |
    """
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    

